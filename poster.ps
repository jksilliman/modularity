%!PS-Adobe-2.0
%%Creator: dvips(k) 5.992 Copyright 2012 Radical Eye Software
%%Title: poster.dvi
%%CreationDate: Mon Jan  6 20:05:31 2014
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 1009 912
%%DocumentFonts: URWPalladioL-Bold URWPalladioL-Roma NimbusSanL-Bold
%%+ CMSY10
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips poster.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2014.01.06:2005
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: psfrag.pro 0 0
%%
%% This is file `psfrag.pro',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% psfrag.dtx  (with options: `filepro')
%% 
%% Copyright (c) 1996 Craig Barratt, Michael C. Grant, and David Carlisle.
%% All rights reserved.
%% 
%% This file is part of the PSfrag package.
%% 
userdict begin
/PSfragLib 90 dict def
/PSfragDict 6 dict def
/PSfrag { PSfragLib begin load exec end } bind def
end
PSfragLib begin
/RO /readonly      load def
/CP /currentpoint  load def
/CM /currentmatrix load def
/B { bind RO def } bind def
/X { exch def } B
/MD { { X } forall } B
/OE { end exec PSfragLib begin } B
/S false def
/tstr 8 string def
/islev2 { languagelevel } stopped { false } { 2 ge } ifelse def
[ /sM /tM /srcM /dstM /dM /idM /srcFM /dstFM ] { matrix def } forall
sM currentmatrix RO pop
dM defaultmatrix RO idM invertmatrix RO pop
srcFM identmatrix pop
/Hide { gsave { CP } stopped not newpath clip { moveto } if } B
/Unhide { { CP } stopped not grestore { moveto } if } B
/setrepl islev2 {{ /glob currentglobal def true setglobal array astore
                   globaldict exch /PSfrags exch put glob setglobal }}
                {{ array astore /PSfrags X }} ifelse B
/getrepl islev2 {{ globaldict /PSfrags get aload length }}
                {{ PSfrags aload length }} ifelse B
/convert {
   /src X src length string
   /c 0 def src length {
      dup c src c get dup 32 lt { pop 32 } if put /c c 1 add def
   } repeat
} B
/Begin {
    /saver save def
    srcFM exch 3 exch put
    0 ne /debugMode X 0 setrepl
    dup /S exch dict def { S 3 1 roll exch convert exch put } repeat
    srcM CM dup invertmatrix pop
    mark { currentdict { end } stopped { pop exit } if } loop
    PSfragDict counttomark { begin } repeat pop
} B
/End {
    mark { currentdict end dup PSfragDict eq { pop exit } if } loop
    counttomark { begin } repeat pop
    getrepl saver restore
    7 idiv dup /S exch dict def {
        6 array astore /mtrx X tstr cvs /K X
        S K [ S K known { S K get aload pop } if mtrx ] put
    } repeat
} B
/Place {
    tstr cvs /K X
    S K known {
        bind /proc X tM CM pop
        CP /cY X /cX X
        0 0 transform idtransform neg /aY X neg /aX X
        S K get dup length /maxiter X
        /iter 1 def {
            iter maxiter ne { /saver save def } if
            tM setmatrix aX aY translate
            [ exch aload pop idtransform ] concat
            cX neg cY neg translate cX cY moveto
            /proc load OE
            iter maxiter ne { saver restore /iter iter 1 add def } if
        } forall
        /noXY { CP /cY X /cX X } stopped def
        tM setmatrix noXY { newpath } { cX cY moveto } ifelse
    } {
        Hide OE Unhide
    } ifelse
} B
/normalize {
    2 index dup mul 2 index dup mul add sqrt div
    dup 4 -1 roll exch mul 3 1 roll mul
} B
/replace {
    aload pop MD
    CP /bY X /lX X gsave sM setmatrix
    str stringwidth abs exch abs add dup 0 eq
        { pop } { 360 exch div dup scale } ifelse
    lX neg bY neg translate newpath lX bY moveto
    str { /ch X ( ) dup 0 ch put false charpath ch Kproc } forall
    flattenpath pathbbox [ /uY /uX /lY /lX ] MD
    CP grestore moveto
    currentfont /FontMatrix get dstFM copy dup
    0 get 0 lt { uX lX /uX X /lX X } if
    3 get 0 lt { uY lY /uY X /lY X } if
    /cX uX lX add 0.5 mul def
    /cY uY lY add 0.5 mul def
    debugMode { gsave 0 setgray 1 setlinewidth
        lX lY moveto lX uY lineto uX uY lineto uX lY lineto closepath
        lX bY moveto uX bY lineto lX cY moveto uX cY lineto
        cX lY moveto cX uY lineto stroke
    grestore } if
    dstFM dup invertmatrix dstM CM srcM
    2 { dstM concatmatrix } repeat pop
    getrepl /temp X
        S str convert get {
            aload pop [ /rot /scl /loc /K ] MD
            /aX cX def /aY cY def
            loc {
                dup 66  eq { /aY bY def } { % B
                dup 98  eq { /aY lY def } { % b
                dup 108 eq { /aX lX def } { % l
                dup 114 eq { /aX uX def } { % r
                dup 116 eq { /aY uY def }   % t
                if } ifelse } ifelse } ifelse } ifelse pop
            } forall
            K srcFM rot tM rotate dstM
            2 { tM concatmatrix } repeat aload pop pop pop
            2 { scl normalize 4 2 roll } repeat
            aX aY transform
            /temp temp 7 add def
        } forall
    temp setrepl
} B
/Rif {
    S 3 index convert known { pop replace } { exch pop OE } ifelse
} B
/XA { bind [ /Kproc /str } B /XC { ] 2 array astore def } B
/xs   { pop } XA XC
/xks  { /kern load OE } XA /kern XC
/xas  { pop ax ay rmoveto } XA /ay /ax XC
/xws  { c eq { cx cy rmoveto } if } XA /c /cy /cx XC
/xaws { ax ay rmoveto c eq { cx cy rmoveto } if }
    XA /ay /ax /c /cy /cx XC
/raws { xaws { awidthshow } Rif } B
/rws  { xws { widthshow } Rif } B
/rks  { xks { kshow } Rif } B
/ras  { xas { ashow } Rif } B
/rs   { xs { show } Rif } B
/rrs { getrepl dup 2 add -1 roll //restore exec setrepl } B
PSfragDict begin
islev2 not { /restore { /rrs PSfrag } B } if
/show       { /rs   PSfrag } B
/kshow      { /rks  PSfrag } B
/ashow      { /ras  PSfrag } B
/widthshow  { /rws  PSfrag } B
/awidthshow { /raws PSfrag } B
end PSfragDict RO pop
end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 647 2012-02-12 15:03:40Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.12, 2012/02/12
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionaray
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
/Rand { rand 4294967295 div } def		% a real random number
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def

    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
  pop pop 
} def
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
/Ellipse { 
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput { 
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
} def
%
/BeginOL { 
  dup (all) eq exch TheOL eq or 
    { IfVisible not { Visible /IfVisible true def } if } 
    { IfVisible { Invisible /IfVisible false def } if } ifelse 
} def
%
/InitOL { 
  /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
  /Visible { CP OLUnit idtransform T moveto } def 
  /Invisible { CP OLUnit neg exch neg exch idtransform T moveto } def 
  /BOL { BeginOL } def
  /IfVisible true def 
} def
%
%%%%%%%%%%%%%%%%% tools %%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort {
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a
end
} def
%
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 594 2011-10-31 18:13:18Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.04, 2011/10/21
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {%
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 622 2012-01-01 15:36:14Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.02, 2012/01/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 130 2009-08-27 08:55:03Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-grad.pro 0 0
%!
% PostScript prologue for pst-grad.tex.
% Version 1.05, 2006/11/04 
% prepared by Herbert Voss
% For copying restrictions, see pstricks.tex.
%
% For the PSTricks gradient fillstyle.%
% Based on some EPS files by leeweyr!bill@nuchat.sccsi.com (W. R. Lee).%
% Syntax:% D.G. modification begin - Apr.  9, %1998
%%%%%% R0 G0 B0 R1 G1 B1 NumLines MidPoint Angle GradientFill
%   ifGradientCircle GradientScale %GradientPosX GradientPosY
%     R0 G0 B0 R1 G1 B1 NumLines MidPoint %Angle GradientFill
% D.G. modification end
%
/tx@GradientDict 40 dict def
tx@GradientDict begin
/GradientFill {
 /ifCMYK exch def   % do we have rgb or cmyk? hv 1.06
 rotate
 /MidPoint ED
 /NumLines ED
 ifCMYK {
    /LastBlack ED	% 1.06
    /LastYellow ED	% 1.06
    /LastMagenta ED	% 1.06
    /LastCyan ED	% 1.06
    /FirstBlack ED	% 1.06
    /FirstYellow ED	% 1.06
    /FirstMagenta ED	% 1.06
    /FirstCyan ED	% 1.06
 }{ /LastBlue ED
    /LastGreen ED
    /LastRed ED
    /FirstBlue ED
    /FirstGreen ED
    /FirstRed ED
 } ifelse
 /GradientPosY ED
 /GradientPosX ED
 /GradientScale ED
 /ifGradientCircle ED
 % This avoids gaps due to rounding errors:
 clip
 pathbbox           %leave llx,lly,urx,ury on stack
 4 copy /ury ED /urx ED /lly ED /llx ED
 /y ED /x ED
 ifGradientCircle
   { 0 GradientPosX eq { 0 GradientPosX eq {2 copy translate} if } if }
   {2 copy translate} ifelse
 y sub neg /y ED
 x sub neg /x ED  % This avoids gaps due to rounding errors:
 ifCMYK {				% 1.06
    LastCyan FirstCyan add 2 div	% 1.06
    LastMagenta FirstMagenta add 2 div	% 1.06
    LastYellow FirstYellow add 2 div	% 1.06
    LastBlack FirstBlack add 2 div	% 1.06
    setcmykcolor			% 1.06
  }{
    LastRed FirstRed add 2 div
    LastGreen FirstGreen add 2 div
    LastBlue FirstBlue add 2 div
    setrgbcolor
  } ifelse
 ifGradientCircle
   { /YSizePerLine y NumLines div def
     /CurrentY y 2 div def
     /MidLine NumLines 2 div 1 MidPoint sub mul abs cvi def
   }{
     fill
     /YSizePerLine y NumLines div def
     /CurrentY 0 def
     /MidLine NumLines 1 MidPoint sub mul abs cvi def
   } ifelse
 MidLine NumLines 2 sub gt 
   { /MidLine NumLines def }
   { MidLine 2 lt { /MidLine 0 def } if } ifelse
 MidLine 0 gt {
  ifCMYK {
    /Cyan FirstCyan def
    /Magenta FirstMagenta def
    /Yellow FirstYellow def
    /Black FirstBlack def
    /CyanIncrement LastCyan FirstCyan sub MidLine 1 sub div def
    /MagentaIncrement LastMagenta FirstMagenta sub MidLine 1 sub div def
    /YellowIncrement LastYellow FirstYellow sub MidLine 1 sub div def
    /BlackIncrement LastBlack FirstBlack sub MidLine 1 sub div def
  }{
    /Red FirstRed def
    /Green FirstGreen def
    /Blue FirstBlue def
    /RedIncrement LastRed FirstRed sub MidLine 1 sub div def
    /GreenIncrement LastGreen FirstGreen sub MidLine 1 sub div def
    /BlueIncrement LastBlue FirstBlue sub MidLine 1 sub div def
  } ifelse
  MidLine { GradientLoop } repeat
 } if
 MidLine NumLines lt {
  ifCMYK {
    /Cyan LastCyan def
    /Magenta LastMagenta def
    /Yellow LastYellow def
    /Black LastBlack def
    /CyanIncrement FirstCyan LastCyan sub NumLines MidLine sub 1 sub div def
    /MagentaIncrement FirstMagenta LastMagenta sub NumLines MidLine sub 1 sub div def
    /YellowIncrement FirstYellow LastYellow sub NumLines MidLine sub 1 sub div def
    /BlackIncrement FirstBlack LastBlack sub NumLines MidLine sub 1 sub div def
  }{
    /Red LastRed def
    /Green LastGreen def
    /Blue LastBlue def
    /RedIncrement FirstRed LastRed sub NumLines MidLine sub 1 sub div def
    /GreenIncrement FirstGreen LastGreen sub NumLines MidLine sub 1 sub div def
    /BlueIncrement FirstBlue LastBlue sub NumLines MidLine sub 1 sub div def
  } ifelse
  NumLines MidLine sub { GradientLoop } repeat  
 } if
} def/GradientLoop {
% D.G. modification begin - Jul. 23, 1997 / Apr.  9, 1998
  ifGradientCircle
   {CurrentY 0 gt {
% The default center used is the center of the bounding box of the object
      0 GradientPosX eq        {0 GradientPosX eq
           {/GradientPosX urx llx sub 2 div def
            /GradientPosY ury lly sub 2 div def} if} if
      GradientPosX GradientPosY CurrentY GradientScale mul 0 360 arc
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill
      /CurrentY CurrentY YSizePerLine sub def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
  } if }   { 0 CurrentY moveto    x 0 rlineto
    0 YSizePerLine rlineto    x neg 0 rlineto    closepath
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill    
      /CurrentY CurrentY YSizePerLine add def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
      } ifelse% D.G. modification end
    }def
%
/GradientFillHSB { %	hv 2006-11-04
  rotate
  /MidPoint ED
  /NumLines ED
  /LastBrightness ED
  /LastSaturation ED
  /LastHue ED
  /FirstBrightness ED
  /FirstSaturation ED
  /FirstHue ED
  % This avoids gaps due to rounding errors:
  clip
  pathbbox           %leave llx,lly,urx,ury on stack
  /y ED /x ED
  2 copy translate
  y sub neg /y ED
  x sub neg /x ED
  % This avoids gaps due to rounding errors:
  LastHue FirstHue add 2 div
  LastSaturation FirstSaturation add 2 div
  LastBrightness FirstBrightness add 2 div
  sethsbcolor
  fill
  /YSizePerLine y NumLines div def
  /CurrentY 0 def
  /MidLine NumLines 1 MidPoint sub mul abs cvi def
  MidLine NumLines 2 sub gt
  { /MidLine NumLines def }
  { MidLine 2 lt { /MidLine 0 def } if }
  ifelse
  MidLine 0 gt
  {
    /Hue FirstHue def
    /Saturation FirstSaturation def
    /Brightness FirstBrightness def
    /HueIncrement LastHue FirstHue sub MidLine 1 sub div def
    /SaturationIncrement LastSaturation FirstSaturation sub MidLine 1 sub
                         div def
    /BrightnessIncrement LastBrightness FirstBrightness sub MidLine 1 sub
                         div def
    MidLine { GradientLoopHSB } repeat
  } if
  MidLine NumLines lt
  {
    /Hue LastHue def
    /Saturation LastSaturation def
    /Brightness LastBrightness def
    /HueIncrement FirstHue LastHue sub NumLines MidLine sub 1 sub div def
    /SaturationIncrement FirstSaturation LastSaturation sub
                         NumLines MidLine sub 1 sub div def
    /BrightnessIncrement FirstBrightness LastBrightness sub
                         NumLines MidLine sub 1 sub div def
    NumLines MidLine sub { GradientLoopHSB } repeat
  } if
} def
/GradientLoopHSB {
  0 CurrentY moveto
  x 0 rlineto
  0 YSizePerLine rlineto
  x neg 0 rlineto
  closepath
  Hue Saturation Brightness sethsbcolor fill
  /CurrentY CurrentY YSizePerLine add def
  /Brightness Brightness BrightnessIncrement add def
  /Saturation Saturation SaturationIncrement add def
  /Hue Hue HueIncrement add def
} def
%
end
%
% END pst-grad.pro

%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: URWPalladioL-Roma
%!PS-AdobeFont-1.0: URWPalladioL-Roma 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (URW Palladio L Roman) readonly def
/FamilyName (URW Palladio L) readonly def
/Weight (Roman) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /URWPalladioL-Roma def
/PaintType 0 def
/WMode 0 def
/FontBBox {-166 -283 1021 943} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AA45ACB756B8E2BF5B37627E46
DAFD4A4F741A859BB5F7D7C77FC7AA96EE6AC93C06CA829B81FE31E32D59C6DE
B1BF3B6CCC5C3C9296DC86D01487F08AB668F656CDD88EB816AEDD1EFA47F014
FF598E78C978DF18F8F66057351BC96B48015AF2E09E3E318053E952E9AD4037
BFC7EEF9CBFD7BC35746565B7EFBF241639793AE357220843147FADB929FBD24
01C88A382F00BF79554D125C543455330002B0FE6D229830470C78541E78DAD5
3E7C1A619B91215AE025F81561441BFC9ADA446035B8EB9C3D69BA746AD0CCAA
049D1FE4D905DF3F48D22900E02A23FB23F6B571DDC8B2CF7008431C1EAD7F6B
D92A2C42CAED94F9714F44E3CE31FBAF23A064AA2A7F13D6E5378E28539F0009
323A0755E58BA7564A408B142C230672A423DA6A6E54ED162AFBF8FADFA75B0B
FC648D5DA6EC31251B62B9F619AD9460876EEFCB8F9D2369CA3055820306533F
3C1D47D5A2EF97619FC2C780BCD9540A820748369FFDAB9D52492F130C0AC3C8
E0C87377DA6C21F1DE429C15AA939877876F84605F6785B5ADEA97321BF29DEF
3692AF535EEFE801975F94645272142128A3FEC8B1BCEB6E57B83520B5C4DD69
36DB8CDEF6E49B8944CA31C59F8790CD3FED58F1182D9AC6DCB2D75B4881B430
C67DB769B4745EA54233CDFD5600BB2A96209A83FD04C13D4AA4AE27DED97D25
93F6FDA5F64711EC7A2899AC98BD8D8879A6A348265832994C3BAD80E1D12291
CB05924302B780443A76A09E1C27E8DCDCD87FFE3BE17DE0421A47733C2BD723
9C876942155834190F65598810AF8CAD9842F8A1E3BBD2AE3348BD8FC9189FE2
ED5643EC4D87148775121702EEB7639ACD80EF4F07542BBBC09F98F81FB91A1C
89C691BF38CE4239B11C1C0D9A6B864753E204C0BCCB093E139F9D6104FE0584
DF022C621F86E5BFE2E047FD560E8A89B3872C87F7811E9EBCA9CF182472841A
88E7C421E5CE69DAD123B88D4E6C0FD85C86C74435BFCAE28C2B5CAD57D91A9B
4473906D044085B5336B066C6D9CE994D2B333F470AD32D3BC28BA2D699B7AE6
2B689CD50CE2D458501EBCD2381F3430C3059EDCA22D9F15CA03CD18CB160E59
C0E960F79010DC1E9EC40BA6914F9FB7951CB4D5AAFAA135C17D5D64CD848A32
C71A5C856CC9C94F24B6C9AF854B83771678C0B0B4C6A4D9C05ADE69E5C04697
8751F11D2AD5538410216C992D959F428EB91223263D11EEA2A32700D13BA0DB
28D5500F1719FED8373EE195441C0322F3D894FAC5C4F5BCA65317978E3BC211
E6F66BCEF2C09E17D3CE40976600A90CEEC60DCBEC1F238A1FCEB0ADE8277F43
E810A34375B477C2BF78D77AE9CD36B33600B8F7D6A36A573708C2EC0183CBCB
422C614D4758BE9A12C1C5D7D2B00F30221CC58CBAACA63241ACC7048439B2A9
E2E521B183109C4CBFC016A8E89341C884561E4817DA219000419C8FCB2DF815
42EF56F134AB25DC2D7A620100341B4B33127E93633A6A0D2A917CE042D8DFA5
49D7840AD3B23B9656E42DCC9309CA2BA555EFE454923329025D322D8AA0C5DB
D5D3579512D5272D76501C0A22A0154F0C2BD53DB375C22330994AA1EFDF911A
EBBD37B6C90B1BC83973E430C90CB4176B2042F370909250E4410838A0E5D981
8F7EC2A16F2A378185D01A58917876797365762115BD5BDE5C9BE739E9D64E6C
F5C494DB3AE7C0B7D06FE73399ABDBE8D2A7C294B282BBF3CF2C16DC16B74714
5EBC05554D9A41FD680B6CDCDD934C31A4F69525AC2B36DD348D5A9F260428E4
C838B5CA75339B6E859335E9C8813CB052EFFB28420EBA065CA35AF942E6CFC2
646D50949425D156C3415855EAFBEF4701909913270E0060FE23E1DF86BA113C
18825686F9ED9588F06261AF3E8D1343D6791CC46E6C48D68060B06D75103901
1DB94742CFA8F78F9EC9834A8D9C9B376D9B539BEDFBE4BF99F3743EB492201E
3AAF5C41EBE3D6131603EF1AD7BB91A169491C992B3061D71E2CA93C19866DBD
95E41C04BC8E9A23158682DC0961E419589E32AEDA5BBD35B37BFE53C32E9EF3
DE510D05F01B979454C6280A58F8BBA7D1DEE26BADE0A64FB79CF0E0225EA401
DB454BCC97F7A0324A41A2C2E9885420DB19E1EEE2999B2CDBF507630500597A
96A072EFCB143FEB9090CCFA94F1ED6284AE128906F7C735DB24AB4F9677F888
E53B99CFC4F5D509D9C3917237D7D9A9A9E39661AC586B99396580678E402EC7
3D406432F2C45669AD43309EDA0EBC89D1BA5D33B1FDBD321099519A1D3F408C
905FD4EE4200A45A6EF6191EC76E283131AA3A50FC5E8D904FCFB040A1C46AFB
DE3E4E68BB28AC0E1A83692588C8284E6234D0106EE0F9604BDE725263129B15
E16861ACE1548A64757720195316094C16C031A346F6629FA8C3B522944E2DF9
FDB9245FA7CF327CD80AA98451165EA950EB7286B7B2E7C0ACDBB8397173FE34
1A656D8D88195E5D15F752830A3343249D4A6D0E9EBD59093E2BD0287A3C313E
9C67F228D8E462EB991FE9975616618BD807245E06C7BE394EEC236F5C1DFFE7
8F9FB44593563F829D2FB4B902600EBD8233796A985C0DE1BF858F26BA9BA96C
0BDEA66BD4B5A9E63A9860462AAFF8998276255D99F0E55E529895608CB04C8C
0CE36A84A319FEF58803302A04C3648F3181FB249CB1194B912ACCAEADF76654
467C4EAB7E6875A7F932754F573E0554B4874B8C1D1D2548D55190145B58AA91
50FE768744CA00FBFE22898A4FB17F42B6A8C1776E4DBEB976D4C7A17B36ACC6
2C3ED1E3EC0D7916EF9A80D828C30CF8B67AC547E6F68A263133C2129BC2710B
BC3FF0833DEC10627A2DC29DA45DE5D65354B4E5CED26200CF84413EB1BF9AAD
9821463FEB95DBC24E9E5DFC62B6254E546442EAD5E39891286E1BE07BB67A30
E14108FB915DFA6445C3F05A8A81BCD5E7D8F8E2EC9B9B098FFA56FC46A738DD
866D1FF70CF100E2D4D39A060276112BE48FE6BBA3D9532951AFD7FEFA9A234B
AE3F0A43F7BA79E5A2E7F5432F5FCDC1B9E7775D3FB61CB06A01E32C5F9332C1
ACC7C1372DD9BC66DB2DDD223779B1E674855E0EE38181D9C05CF8ECA2B28101
5BDA6DC1C36C72AA60D2751B49E6F5C69A44E427FD7ABAFE5A760335A6C8DB0D
4C915CD937F83D7F66915A33BAF335AEF83E26E69545DCEE44A71F11BE8B131F
010219D48D74707A3F12B014C1B7207E0046FDEA7E0890575F1D961B377D5D29
47B2D313480AF0938599D4ADBCFEE07640D4503CB740580F391263C96D9221A0
5558FB550E73AC9926543CC5817040EE9228422C26B26F84B99F58B97EF8840B
1220C0F14F305831058F9E692CDA9A28E232E82B2B61ACE3A8A63DBB14308BD0
708B3F833858D14AA3AD2C3546DFD38150DB23AAE0C366E6B66558588337D94F
D10A6ED71DE1033F24264FC6E422A647315B6D0B18BAF64FC08B175D009055C3
54DB6FE0065040EED00A848800E2B967666179BC1B92BACE86951DD2D47EA130
B987716546B85691A5EE812EDDE56C4457966D4D8162AF2D55D830A5DA92E166
1BED7897641BAC5A06C2AF53BAE8878748DD611C1D8F1E2E2E30BD50CEADCB3E
68828EF248A7415B2D32FBD3A9C014DA2144FBE1CF0E5ACA2F056563BA0B4952
54451C352AF582A0C1B3FF6F19FFCAF6627099C08DDE996F9D3B8A2E27BBB277
61DE73497A3B48229EEB9AC514E4F025A6152EF346CD7C05F0C4B63DC1C10E03
B9D34C6727AACF17285875231DAE3862CE6FC4C5E67456144B0C597491F37049
EA33E325453720F02A01A0A47F17FBC5C9B90489846E9685891DE635E03C9776
18805063C3424C6CD93D5C594763652BBBB59CA44D84E10BD7F09A111629BB5A
C26B70FD50BFF64A0C102C98C3162270E292C0B754CBC340719EC306945B706E
914BDCDF8FD26BC89057060BAC2915FB95C7258079D27E5B7A3D8DB03A84CD1A
7E8F94B73610BA2D56F441A0628F14930E3FC837E1E171F2522ADA7842EFEC27
F5D741C6B7F60274D057C0661FB7FA414BBCC9C581C511E03F16516C2F90E2A6
7D5E1DA58D23AB92E8A97C2CE2BCD216B45A7F12D8A7E2D5BBB411DEF5293C01
896B10A6591BE5CB0B9B55C1B814F6B672D76A531AF237188AC9BDF997DEA662
B7342E7D1D20D633D4208132B8E428CCFDA680EE9E5FEADA1D290708A822CFB1
CC823E9F705E90EC48E4ACC15F3D5963866408A1130EF51E1064AF50A14B211A
3CC68CE126A1AD45F9C9C56E5AAE9BBFF0393E7B3CE26E8260481798BD71158C
16A808DDD8C2ACC4699D209E9CB7E40C5C870DE47AA0781E0F88D4C7AC1395DA
A34DEB0B121C6D5216395EB25F854CBA99CE65988FA06EE78A800680CD6F62F7
2BACCDF3DF894496F2166F30D5D82D5D017B3EC5E6ACB224B0356BAFC4BB81A0
46D60B5837D5082C3A6CA52CA7A50F8FD2F15D083CEB170CBA0FA961820D13FC
D2D183A6BE3FBC8272FF8278D95BE2F244205E11D810C339C815625DA2E19D29
67A8187484FD95F837CDF91C4BC76E61923EB0CD6765DBCBECFDE266A8196925
5AB234CBFAA60559123B2FA6D205CB95D2053B855A1C98714EC451AB59602A03
8B9F40FF7BC1C80599282B6153DDE289E7528A27B0B4EF47C977C94DA64AAFF0
DBC73BA4E00AD6D7F72200918504D8DADEC01A8E885F7C202EC5679999999D70
6653AB0622D6CD12767B11AD32041FE4B9E90F918FA9B80B5F95D41F7D9E1B14
67E63CBEA39811D7E662F46C8EA25FC4CEEE9723015418CD0B6C54D9609D4769
C878082BEADF60F72312A3F4C0A620339B352B9D052CBCF9C3DD181DA6215BB2
4CAD375F74F86A864A7CB45F9246B3CFBF701460109B55327515A31DD64BAE07
EEDA4D1042BE0DB0311AAD05E48B2C312C57988F92BCAFA895CCC65D57660D99
458E4771FE0163A1579253C41C7DF6EC4140AC4E1FE6A4C91263674352579D63
83F068F8AC98A8F6D9A7A2398E14F730722C5EC716C7F54C1A9D769C699B9CDE
7DF9637C016759816386FE3625FE94B2E5D4148844453D48F26DEC0FE33E16D5
9F60B06D2DDFF2BEF7458CFA4342F13EC5D7FF5F71F10A381484E656EE7CC5FE
74EA007C21512786CF5AC620B113FD4A121FD412831B3DA26DD70E9CC24991CF
3F1643E11C74984F04267038E2D31EDC6F27304D2B62C0CD6FCFC1C6F977FDA1
0F45D139BA13B05FBDDA9CD5E37D609985EBCEE1B9FE92EEDFC1985D680E1600
C5E20744D581B76E846EC571C19C5CD123F1F13468246EC995C88032AD1CD164
451227095F5E7F41E99E0AC88121A279D3D42E716689E9955166B5D9D30C094F
A4A1DAFF1C0953C142CBA917D0BEC4D2E8EC7BAFDA2808D2854A15D01D975103
A0A1A3C620D4BF488F5987CFF164CEB34C91AA095FEEBA8B809058B17505A343
EB7DEFB4954E64EE4F12A473E68F096C43F7F0C114FB9C645E06EA2B2F70E7C4
1B77DAE3DFA1A8CCB0C007F4C50242E48324E9A31040AE138A87F239B22B3AEB
78CCE20956F177B6CB26AB6FC781B1D3C6C4CE728933C8CD308C436B61B1EECF
06EBB5886888D4A6C547FB5BC99080FC805A0E2622953A7743F8782A1208D226
75FFD0E9C2CED9DC3A91C07110EF25829EADFDFC7236F70B6CCFF25048A50230
244D15827EF69EC670F9ABFF03B0B0994B13507BA469118C6BA73621FE6CDAFE
E3D52F900A75FC1C5036EB454C8F67846866E9CE78EB51F7F2CD2B44574480A0
746D1FACA0271C331247360B7FAF27815F958089CCB66A5A97529C5ED2573FDF
88AC557D28533ECF1EF2168513A62CE201D16D084F929BE92EBE417545003D75
592B88936D0A44AA1953C8E49D665020E999CC96205CFB02A6E50422766A44D1
1930B3F035923C03AFB4FD5ED0DEF5ACB64D6D8131277FA59C5C5C58B6D9CAF2
74F10016406DAAE2FD91D559F40D7A9AB35C302AFD74076330AEBFC2FF1B169D
F4A9175B905F29D792DA5DBF64DF461A7E969BE0025517BD9F4B2DC0116A24D0
251A3B105101D89E94FD6A3743D5C83B79ADA3CE86576A165B2DFD83DB227E9B
2FBC02836985AE5A567D53A786AE50CD15FFBB9189D747252FB4E3EB64E79678
F7AFD0CF8133B83B7E744F1219BE525A61FFEB436E25534EFEC4C0CBE41CAE7D
6FFDEE0F9497067A1DCC7087584F75FE01501A8E798449331BF59B04A846BEB9
06269E768A479726B1FBD4B67A82DBE993F0B3771B3B7E88AF5EA176F638F7A5
54F8EF7918B4623BFDC10566E2C71CA8CD4F1B6BE8EA71C467431A7C3C715BB3
09D6202001649969428437996D0E9A8D60DA666E833AB73F20A5251094F96D90
CA1D530472174F09F6B6112A96D9B30FDA0A8E625F4A2D61D77A8F8C01FE6227
D9BDB82BADA52DBC1BCCF2B7A06355BBA425BD235FD1F5601DAACF26375005FF
C71211EBB0E70CDC4410262B048141D623E7B3A7474AEF7C77EF9FC555EE9814
AD4A07983923E4BADB40B8720E621FF5880FC66196E76DF685F5EB3AD5A1FE45
117A8F541AE55655E132B62AD31492D0956BF321AD8C7E96BD13FA33D5F39264
ED66FA6F3CAC98E854BAE680A8AE1BEA971946D2B64A69627A97A3CE8303F146
8E713B2ABACDD58E8BA678F4AA5C96EF4CB7F5532809BCDB1E2A9DDEB03CDE42
826DC972A96EE351252820E234C968C959ABD70FCE958A9AF5389BAA59CB8EA5
4CC93C25BEFC0162375EFDB2358A749C81BC5432D45BD5C0B881178F9D5983DF
5BD818F47DAC2C331799D791F9D0BB7E2E4D1D4883ECF4F0EC650772F6070841
FB29EEC88B24C0B9C6B7B8C5C433D6FD7EF0F07EE100399BA512C5B9B8A2E385
B93F6BBE9EF72D78F9235CCCEFE935B60909A13ADC4BFBD5D367AB9AF6102CD6
7338108431ABCAF9BDF1C9902BC5B01282A77234B6A78740F889CDB7278FEBB2
70AA922A81ECA8C30EEA86E88BE2A3E2C2B3EC65183BED61D743D77C9110E8C1
2E338163EE2DA616F6936C9A0AC6551891CAE0922A3C733FB9D45F81757CFC8E
D6BAB56FDD3421056677D71FBF913829720B6BA3BFD44765FFE8177E79985533
4DAC3760EA1B589B5562F3D486591FAFE270E9035F12399AE9E99E066688884D
BEA2FD2FAE262A45F1B3D83C153C9BA5D98CC8FD4F4FCBBE1EFC77CFA6A9CCCC
6BBA1DBD5D83EE6AF31BEFB5CD0805AFE3DC207C637F63A1F68C6D5A2C236938
8CDBAFADF9D24B2EB524C6AABD7EFB03CF1B8F6668C8BA470C53D5BAC0B89EEE
B9E2F9CFC6BCDFD9A438C101EE9D2AFDE7802DB04DF728AF5D691124FC980659
1BBA997E117592912B64F0FDFB5648C9BC2C591869D8F50C4EE4A1724BED4905
EDAA8A46A337EA53E0871D11AA878E6791D2D603A9F27E558E396EB858681DC4
BE1B7083CFA90832EB06617471F08399B1453DFBE4574A95BFA22D36D08F90A9
65C7707608D027B4FB3836A50D03D5DB93CE19DEB7C60644ACCDB4EDEE8DBEC8
9D2ADF4B5AB8E1B0DC311FD77D52210EB2073CEB06E68B316250B44907874A1B
286B7DCE0D4D5B51864B34188BF94B1A187D0EE152ADFFF6FB35CB22667E746F
CA59786BBF02D0E32620F3E8A2D06FEF8A8810791D8613A84B13BC1371BF8A5B
0B825DB940B2125C16F982248B408508A75D40119013F43D9AEC9AEC5A51E00A
C57C8E984818D75547F61F66F43106A015B4BECF94937CE559E9B62B92269E14
A11BA6A5BC7DECE20029034C8869677770460BC01C7FEB8A6BF182467ACFE3B0
5FE61A64BF5DDA83C492E890228316162A20AF3D8CA197EB10B290F65D7EBCBC
43190EE840144F9F053FC85041782B25B9A9FF3C9252211B9B6F9110AD279555
158D19A7457D79AC6676EEDAD46AAD795277646EEDB0F6AA8CBB9B5DC32EDAB0
4A944BEA5D3299C3E54C19F0AD47C282AD725D4C8C7126E772A04DABBE688CB0
AD6BED10751D61D4042FA2B42FB7ADCCABDEE0D89E467E7D7F8EF029B6659B40
BF3DD9D91DE1D37316A4209D02398C839BEED6D6C31F2C9CEB512CD25AEA07A6
EC2C6585CA14CD6E1C4B6BFE6AF900DA0035B15E4B8FAEF17C1FFE38EA8367CA
789074CA92CF0CC2EF2CB0360A1333D32D845E9367F2B0671FA8F6F348FA5B59
0AAAACC20264A49D046D9B1B073BF9BBD09852B4C38C91A596E2E66778877FB1
C25D8E2E7ED649C67C0F535C3AFFE752D2E0464F85C56F05437CD53873588D3C
1F60D7A0E897FFE3E31BB22FC5E93747F5A36F932923894E45F680708727EB2C
59215D05298EF1CAAE642FCAEB99606BC079F3230443D11313D6EBB93194BB05
87AE6DA5D759909821BB1FAA64201B5D909232815136F4A5E94C0430A0400E3E
DDCCE5BE60B3AEF9BC66F7E84DCECA6AEC42602316F201851D31F54E6002A72F
D4D773D17B9EFFDF4910FB17417A40ACE20A956D46E0EE185C378E7C7961340E
398551177A7D13B2A92149416F73D1DFEC96B8B48C55D6D0B9CDAD690F8976A6
7188533233AAAED7CAF4A45D6417153ECF720449E215CC7EDDA0A06FB5E7EE15
1EE99A61A68FC2FB7A553605C6CC1D73E1FE5770ADECFE05C4FB0862A4069607
05C7BD4DADC86FC63BF01D3A6A10A5FE389B1AF013EBCBFF296B4911B97E5F97
5D12379864A4CC14D3103C4994E6C823EA475851AFE225349BD9936E274ED7A5
CFCC0057DFAFADF55167FE8A2F947030413B8C42BDC2E33ABEAC450FE8696B71
0DC4EA851DE999856DE95C39F1FDA13CB5FB9F863B13F09F0538290332E9684C
6E9B3ED5E27675562F1B47CFCEEC3CACED14896D1C22B76058B66BEB4C215A29
40BC118841E4E82E006775690FAC59B411CA7266BAD3696FDD6EAE3772D6B71C
B12B6197CC0CB1ACBD1FAC612BD45CE3F95523612A2134E9BD66FD31A1ADE2F4
B46BF25141F39B73082C5CC0CE8D104AF885617316CF72D7B183A26DAB10854E
7E129F169B121155CC0184684A3F6BCE8C5B4270F6A9C95573E2B64373F20D95
B2C2FAC13E9008EA3961649C0309BB881FC3197130E1D4846F62CB1D02855E15
66A71B087B76E2BD4BBC8E80769A51F6D020E2FC8966784022E31CDB236ECAD3
AF64ADF60B15F514AFDBE6F43F03DE472E51218AF0B3203D06843A2198FFD4F2
52EC70527AEEC443F660683E6CCC89ACF2A1A38046346E42B4634115D7F6B821
E75DADFFFC8A8C44476452EC0BD581F69829E1D5CCF17E5815DD65AB05A0DD8D
E0B31985C9B36A75CF8EE210A387A74289BFE2575672E16982218A34B5AC30C6
5FCAD7E61CBF3F902962F4494155F04DE42A117218FA5209AF3593D58125793B
9A54F773ABC650E518D207549B279FDAF3A696E5159A0A0B91FAE94181429323
8B32FD1E234E0873FFAC235D17872DAE785001D60AFF50A892C0BCA54F72FDDD
5E16D8BA56FCBBEC8FAE42A5246F48C26F34264A56E4A87F6B3F0FD2D548E260
4E2843E6ADF3183E6908E9B81434C035B7E4BA63B9C76486A43CB72B253E8B30
279503B7D433279B918711008D154B284120A911EC8D83BCED6066FA6CE8BC3B
A66933054518026CA3C35805BA4101E5B579BAE396554B20B86A6693CC2CB681
A0ED9998712B112B347791609F7B98B8D14FB6A6AB06E530264CE22B0906EDED
FFB3451CE469878AB8EA3F6CBD1D5AF36F71979F0D7B11CBBE265B874D04CCCC
B500E88D5775F695734EBFCFFC153918F7F70D9C2BFE7A01A19900A0F4623F9B
400A0964BCFA626D48BC2E925F9110FCBDF8F2EF7A5EBB3C721A2CA55EE8A565
D2B43A69983ACA4F3E1D23DE81FC032990314CBFF786821BCE671202580634A6
E8F41AAB0CD2896B25C77155E820E13291132AEE18D4F21BF74F5BF076049BAC
620D7C544BEF828A51B0647C57BBD287B9909D602F361A12C7ED794AD4890A58
FBAC70AEC41DCA1993748A709D3FC28E9F66382F64C6FCE826BC7060AFA7B3D5
FC38AE339EBD55DFB582ED425099FAA6764A2AB0DC35ADB6EC337B2FFE01BC07
C04D4C3FD0AD03A9125A3B90CE131DCBCAFF74CB9A240C8E092DC93C7CE88BA3
AF6737B194783A983B84C7B062CBC7D131F13740701ABBD926BB41410A2CFC61
88B576CB5CFDFCF2D48B7B4069183D36F1FCA9535231C6267F9DE742172F4F29
103848B7C4C936A4837292916722E338D893B6B50B0D451717DCB3287444E7BD
A444779912AB8F3C00B7585682DE38C1E51CDA786F7EC9251AC730038199F4D5
F96FE6FC95BBA9D285A8F8F18DF5A40CC923FCAB3A839CED885DD82B89670634
267701D2235CAEFA2A48AEDEBE15CF7632F5BE9322C65F533460B944F0A2D13D
6EFA727D0750DB713DEB72B021C6DADA9CFA971436E70F1B0360994A78B38416
AF02C8AA26742464FF0A0FEBC92A3367BEFAA36BF1C17B37AB76D1833FBEC48B
9C0CFF0AA8E9C935AA72BB253F7D1080EDD7CB7F80F45DB99DE4B54017830FEA
503E833A55C3C86E52E4012BEB6A4C65603D03DFDEF92C3AAD7F159CC26C9FFC
B66B39B492201E3AAF5C41EBE3D6131603EF1AD7BB91A16A0400F696EB582F5E
AFD33A8B88C6D49F1AAEFA49BA647040BA536403899F782D7C85211D48DFB521
FD1531B0617E7BA791518DFDFF3D66FAE91F5EFF67FFA5F6BD114496C6908AEF
CAFC2C9DDFDD855116AFD66EA16F95F8FF9323A756E7A67C5DA7C09EC09D1047
23BB02264F57F8A94227C5D0E0E138FEF0F6C457EBDDCEC1B3C150DAEFCF107F
0A4307D118828912D14C9792317664F1126B61E6F21C48216AEEE4D31209BD7A
D01EB17C5D14F33EB6E0A5474E5810C493EEEC7F18700E427012237BEBD759D4
299F4FCC4C6C0F21260F2E92C7807C746F3841DECA5D5EB05DCC02A67AFFD0B6
97E8F5402B04957F823E2817AF64167481E4716E2EC4109E8FCBFC2A640BAE5A
27BBBDC772E9DF96D7D774F75DF936D14A6FDB0F80197BC89C676D520EFE43F9
C79F9F33B74BD223F530AC864D84507319AC1B1D2B8EA5223B5568DAD3C8E8A3
03B29512592C66F899301FDC203F696BAAF4FD49906B98C30972EA7AEDF0067B
553C21E6698AFC2729C73C29D2EFB813FD36AC476DA9DB6BA03531DB1815D29E
4A3DB06D65B9E53BF531136A5EDF11D372788A20D4FE3D12336D7351A4A78FC2
B63B18099B626A00C6D1F4A994FD86554A646CF6B66EE268FAD2BEBE6E85AC68
34AAB075B8383744BB1B16C926D616D11FD3B3F4676EE01747D854C22BB5CCCD
C24CD76ABC924E9C153DFAB71C789E56263362340FBA0CE1AFFFD14C7C2A98E0
6F2F15FFA7271DF32D5D1CCD83AC2C7737A61EA5617DDDF2F8C6D95123FCE4BE
E45C1F20EFFCEEACDB83FB1ED39DED72DE505A1F1BDC06C89A7EF157F5BF5294
A2EFFE266FD665EC4700332346D4EB7FD4363E63B0D79AC39F2BEC1F07D5A2BF
847CD09339E14D0D405561FA8B13193E7E5C61D925289EA8C422936F6AE5DFF9
159A0C0DD2AF1EB60E8A518457E36615BD447A52C921F3C5B3A2307655F83C68
E453C34EFC565910BC7DAD3149E1DFCAB3E0B487BD929464B9111DC738B653B9
E8E1700EEC19E05FAEBC8CE71E20740A2647E24C5DF896AF5FDCA41C2783DD59
E7ADA6B63BA2B5866BF2DC3E050BBF198F4FFFD54FFB2E9A84D798B106C264F7
55CBEBAF7C7C7D3C7F5C1E50F0A6895D3F367831074345AC93636B7129D4D66B
DEDC067F5A6E339B9A0C6FA9A8DCAEAE61073BF90DB2E30BEE4B12B3C331660C
4ED159BA022687AC9D26C19516E7D5A5D33A6262BA5FE03BB2C4F0EF5A35DB89
C0F3C410189522F61655505F37D6A182ACDF7D3B149A27623FA8E718440F9AC6
20FF7BA6421C8732F794588DD459481334F6F19E1F89D533DC0E8D85F9DA7CE6
4296D031B6E96359EE9D23C7E67AA1880AA78335CFAFB9E1AB38AE44861AB035
F1975F536D69573C5C757A1F1456DB3F4F2FFD5180F75EEF61BE8180A3DFA9FA
C59BEA9885E3E420F0F52985C2FEC7E100F1D9DD0E0ACD846F7C81D63EFC9840
177383ECD505897DC85CF9D34160ABD13364B979856E23B8633934D70F26031F
3C4802B2CE905F6747FC08FA8B3E36CABCDA359D58EA5802A2CB4430A8AD12BA
85D3A0C9D2557431247ACCAB1AD2B405C14624C0C48C08D31DF5B55EB21EE004
7E2C0549124FE2BBA0A48C29B90F825CE4EC1B142DEFA43A807C238B1116F234
A67D63D6AD6FBABDBA9EBDF4DE466DEBB02FB46ACE10839049DF579E8405EC3A
D93FA9CB36C1155EE448D8715FB8582B4E9CBF99257E3F0A52F85FB52672F57D
C4971A485D14195A1427623E3EDD7B4C069F64A87FA07BE070B4C4A95C4C5B13
331B95D34A687C0E28D6DB5273D1AC9B7BBBD561F2B3B96F9A3AA4DC1F30C7A4
EBA287B41D6A918B13A74F190C7A40F9488F2C81DDBB1ED0519E003605AC3CBB
49E6AB7009B25E154A59030B789B325B108C9825759C204B2791DDD0EE7CA5D4
9A402160FDC676371C288D6CC71444AC5DC66CAE641CB83126AD7D4A2CF504F8
7D62B3F0F9696AAC7BE62EB756D12C7EDD640B78BCBC361F8223BB3CF74CE266
35BA59A807A2B0A89D694BDCB51973A1B596780AE9222A65EBB702DE1E369F4E
7B82689AEB726986BEF17DF63C632FF2ED52027089972BEB0644E52D859C3B30
6E14E7D767D68214B348BA51AB22E9EA6318B23B2E4F162655033BE287AE791D
F6016684158051E5356635312C27A2357E6C584BFA41D25BBB1DE4D9EB792C4E
9033535316B9000FE8495AF2A471C1A2578D4CBBBBE84578E5A572A35106995E
0CFA0249751EF7824FB4B85EB68F170E3F92BFA18F2239CC24839EECED8A0313
F33161240E4DB91D8206296D827D45EB3BC277C7E97C90D1883A1CFA4BA07C27
3ABD8D91DC99894D9D7F280053479A3A82345AE40886415A13E1AC6B498FE9D7
5A7FC59B051489B0141DF0328DB42C4E19F799CB79670DDDB959CFD26E13C333
CBF22FD740F44F836A3B48AB7AB10734FA04F6AFFF94D13DE25DF775CBFE5CEA
EFF2DCF00782001D345B8EBFF8977BC6DF74FF60F860C8EE5FD630270A116720
7336002C21F3F6436C1FCCD0BC37020F57C1B28AE1B063F5AE2B74650C238772
2519F8BC2D77ADDF3FC10BECD29B267332D8337280AFA2B591D356A39DC43BF1
E27D65F517608BACA8F66E1479BD237F1A196F5FDE0C36B5ED8321451F41F1B5
352ED116AC50B078F4326FA8BDF24405F6EBA9C89D57DF1C1277C4E39EC29EF5
AABD691CBC7A8C53C2B28BBD9722F37EBF1E5E21978F8A4FBCC99D588A824FDA
8D78DB2A5DFBF469339D21719450339CCF16751CB9B1EAED68DB2050223F360A
BEFB0003CD86D2C3FDA258DDD2F12F9585CCDE2A04A25D1766B15F3337128CE3
1933C3BEA316F1368BB81FD048D7B3956D5A30D35AA1069788112FA15A21A852
904FF93DD8EA600EE153C0D6FB875496A80411643748D6C58BAA2212AC5EBAF6
079D1574EB0AE2C302001B00FD9BE11933099D0DAB7EB370343BB7B04279B355
4CADCBD1EBA6A1437853B9AEE7A2D86AD0A82CE08E92298C48D4863DC932E39F
1684F095F8B4E1F152808798B648EF2E5A7F38F01298636F8E1A427D4FE1F443
627F3A876E3B269DDB919565188D79405EDFBB3A446DCE772F4B24C9343E42C3
D897DE532796B42E8DC392276CC51C86FEBB15424B17BAACFAD06CDD33783081
1932DE58D373297150A1BD25542746ADFAE256888F22A5F862FA731D18CF33BB
F61F01565E3C825B0D6146C28CE0613C0947FCF0BDBA0F1368D3E38954279E5F
BFA866526B94316E56A74DE14A0E8AAD7163D6D9B7823E6462C7109103FBDF1B
4DA7CE2B7194624D33B42527A69E23F80118E1DE2CADAEE76E15C3433EF61AD2
D4C9E915592F7FABF6E1460642554017D615ED576CC025B9C74DA00A14B92E60
6247E509FA2E427187157CEAC8DDD45CE9782D78DA6DC51383F402E135F41F3D
4C31DCEF0B491168DC5C66DB2C1AA8D4B0639F70823FE32871EB3B517A99100B
B15D839F6DB6228C0105AE97F3DD92325D581522B270C7410D98624450F81E35
C025A9D80A823EBE4E4EDE1FBE07DC7B8F62272D551EAB2E5A1462CB23B1F613
167C5F43CF0BA1FBC7C1937CE3ED84508C04B23F30441F46C79331B63008820B
A93BF10B80D4B2E980CBC3259F2A7FE5F5AFDFA2602835DEF0A06990FC8A33BA
6A30EFFCD47999D2FDAE46365478A83EAA790F73F15F98627DE81AACD03A97CB
D3AE8040DCDB2C9F963443964081BCE8E27F4FB1DE885224E44592FAC0A854CA
242F0D9CC02F1BED5F60F5C9977D820E70C8D5F55786F4013542378934CE6745
950AC10A8C4A879FC0A323A007162F330F648A428C753F20205F80DE02460AB7
3C8F791B16AEDF904C7D4395BF211547456696FF48D6F37C2111F4B06818ABDF
3337B13915116E6563E8A3CC1C1F7EBE547F10F4F1FD4C20B8E3F22CE2C03949
81A2908104F512DA07E4DA2845242ECF175C82F28A5565A4AD15091C9B89611F
1678E6FA2F0747FA565252323E9592C54BEECD08BED2831AD3616B3F4C79A0CC
36FD6A9A901B1A6F7C9D698516281C0274130F39EEB088CDBB08954E48C7E3F8
3E131E5ED198DC6C058199B31DFD60813E51F3405EAA3ED07EAB1A36B2440D6D
E0DD0D8702B89D1B42115C5C6490AA61A240D72085591809CAFC66887FF3C563
18D5E1D548BCCE6DBE6D91FD902BDE92059485BFCD5E0E0D21CD6BEE82B6364B
85BE8D374A8D48A10BD41C0EE5AD61856BADD1C03A5191B55FDFE51ABED171CB
2BDC8C7CD3C3C9D8C72E516C2E80ABAF4F6CA5ECF506FE1B3F7DF9C15DEC2AEA
8C1983DFB4E01F67E5294D3C60EB8B164FD2016CC43256A16EA86B4045C16068
D8B27C564D95B5C2C7E3F1538C8476118D2008A8395D13BFABBE4A101131838C
15C7035D638427F87E29BBBA2C52EE03063C6C9F9F7ABD353B5CC1133C0EBEE5
DAFD773C29B797B00D04A9BA41017BA2E54676F826D7C8EF603C8C13E359603C
F79BE80060344872DBFC2F335FAD3D14750541D0B1B75533467616E78230AFF8
72292CDD88FF57C0F653FD1F267F5B9E589E8F5CCC579A53EF65B459D8285E36
4794FABBC011104925382D04F0BEE36DF33DA0951D7DBD228759702C467E892C
59B6376543C9A916E0855DD5CEB4EC0A94C48A99721D502028C2FABE2E9DC3B5
FF37F73F1DF0E022652D0E79A7012A045FF72E05DA796A9CCDDC83DC092E21BC
E0869243C506B9BFAA8BA364062F545BE743C7930EA429D35AE9EEE8D0A68AD0
20934525C7DFDD0F3E446D979E9ADB992C57D12A10E2C2823903980506A9F523
F673BA8CF49FF6291BFBDAE0811240CB327A5DD44AB6944920047DB7EF79BDD0
648140F9EF7A02B92E75A597785BBED4857290DC13961C792C1DAFD35FDA10C0
E14D125C730ADCBACC2CB8716B3C9F180BFB8D66CA8CE71CE3E84D7B77D65D42
381D264DFED7A30C3CEE434832D290AAAFB6CA80087E87B6EC4D391DCD5D0826
8EAB44BA2650CBFC0CA9B55CB8F481C5F68BBDC9066AE3BB0516F7FE82C45D3F
4EFD8B23B0E46728AD90E833F397246EA4C44A12EF33A54D20058FDEC76BCF3C
F60BDC1DB09467179704B9F04B677B55FDB64649D0F9F9C71B704E84B1CA6289
6E1FA498AB5BB1A933234276082E17993B297043B2F75674AA08FA5871EFC954
8086229ADAC4953EEEF78155D1AAAF6A1A2CE635E77FC07620C1DC238085DC4E
78C139FF3A8FB26E7F2C68FC0637C661E3ECCBB47543C20271E2233F78EA9CD8
6332F9FCF7E09892C119B1EB7CCFEC582370D71082F466C2AD2AF67E91EC2B4B
1BE8C704194D72A79EE7BD7B5E2246AA9E837F39F113D935DB9E74C2E94E8C03
1BAE58F63D569BB78545051C2FC0B81CC7668EC6C5407B0BD6760B31870D69C4
C15EEA09E1831354F7C4A163C72EFAEE34959A0FD994D2DEDE8EBF3F64D09592
81BC5A56E031E595A1B8276759694309B158CCD2D78FC0E885AA02B897A5ED47
09B6DCE7BB41A81A21F8A1EBF76C41E2455ADD22C031A2171426881BBE4090D1
CBFC4ABB89414C6E4127AB9A549A1C2676121FFE37C74CE40A20C2B943C4B9D4
1C4A6A03DF00E2D87F00952D0388BAE1E5CE6D7DB100632A4C173F4DE74A32CA
1514B3EE89309A1EAE6A5E1AB2F9C2FBE93E979D8C74B1ACB91AA68B4C0AEFC1
EA268D4264FA4C353F3BFB7C57E0A3DEC90F4D99707867F7843C67AF740BBF18
C761CD0F9E7D11D36E957231F856176D05550395F5A21DBE11C81F69883C7937
F2232E9E3D8A1747917E6A9F22CC87FF5D6D18B2339223DC051A56356FFA77D0
E2EEE627E777E95C9B1336AE16F0F3F5274C210AD2AA6E54311CDEE715137B49
E669420289F7E8CDE5FC3DCEEFBBAC6F7D23216162435B0B6D8EBFB873BA0A66
045391DDE1E9764416B9EC81442B2266DBB476A0564A643AF9F1BCD695523098
A75D8EF6FBF09C8C54A4ABC5B9DF359CCD59FA104A64E232E59D3AB5D0F5A7DC
3BE338C17BD786D62F0640B8DD548160E6BA3699F52009F3094A2950EE021A1C
9551E901B11B8862EF73879DC6E8517D66FFCCA18D243B45F586BFB542B2297D
BD130F3AFB72377EFC845DAF3D1E9F158AC88FCD1B639792475E20A46B230F55
327E35FC4BACFAAF15F5436840A929CDFF321ADFD514B23AAA3D295D05FC9C5C
2F01B9FF12160D6444AFF9AA7F72E0DE281FB7E0C419DB3E99A2E00E882B675C
6B2B376B5B3A32B64139B0E8B066257FA354718283E52365A055856A9318D430
B2342B1D4D7D48C054E93484925FCAA9890CDD21A7C173D5BC3213EFB8612E8C
9ED1C9D6B0EA1C44D5934F21D1E3D76DE14551F8209AEEFB23977B854F8C4051
4349FE818ED2CD22C8C1CA9703EF942D3B4F02B080A827AAA38376DD11C7F43A
DB4E5D6BC03B168207C4F6CDC15AC1C6890F75ACA4D99E9D05AEE334783396B9
16B83707FFB23AF53C72678BB302E34D36F9499145042A3AAC7589665B4375D0
FE80C22E76F01B64D947261B7BE93FBA3A396E289EFB80B58CCC383E5403F0A7
C7AE1594E0C3B04DCCBCC76F895CE07D7B3AF4B11F76F4E504971FC44F0FF1C2
D51DAC04FBC3FB0756AE29B5789D1F5B4735C9ED3F75A15B5AE7315B03B45FD7
B2E7A5C8A7F5DDEF3034EA5495D936A4BEF78AD52817318550BCC3489C04F227
D1F30D2722EA7CCC0E74977CCF24BEE195C8E1BB7887E2F0C3654D2973A5CB3E
7BD25031B042B8636B492C0FD34DB08EDF072325C87C0F6F281460A767B88A78
13248D02EA353EA83461370D577C9F2B88639153CF4A1FCA2367C4A1234AA8AF
985A3B1B3AF560AAD8F7A75193810D3A39848C4AECF40555C99ED63E70A93D36
883C383CA4C624BF820B1D5045588E94F4336D40A60E3EB288C58A33C57BF883
777AD1B0FFD5C8C14C34C3638A2205A50091FEAF534CA528E5D88EFD8566893F
56B21809508081E9DA1E05406F8E32BF80E146C917E2B532457FF18D10D441AB
FA40086967CF3CEDE338D376450FAAF4D7465513E42E548F64A50ED78AEC9D62
E0F9CF61ED539BDC2480BC8223B359DA5AD05039EDC7280BD9F1660872B4507A
BF3F1E973E8B4F3DAD7FA872B15FAAAB3109C70FBFBCAA75969712B8F49B6443
67248FBEF392A370A5213F7E64ABAFDAB5F42B0E4036C2DD237344E5951FCC70
14196EF241654B81CF0C6959C077BFF8C37BE2435C76EA2AE88735DBF65744CC
3CEAC5D2D7334976E3C7359AD5A80DC8A9A5AB7918FAB070E18406BEC009B162
74EEA7F554F28186E4F581371E03917AE1203257EFA37114FF9A71AA3A1506BB
97D6D835DCBA8054761907C10012DE5D58BA9334E274E26C9B301BAAEE8A0237
BAC0A6025AAD3ED6BA7F318D51CE670573B51F64669222DAC583BFEA13E17409
EBE66A56588A320C483D7F11597ADA8C3A8E085E0825AADF5CA658B222EC0071
C59FC33AC21FFC7FB7F79FE1377F54F2966FE947DBF44B6AAF20C678DF352FE7
DF150D49DAC406FCB523E307D6F3E9A54FB8D5F3CA635184ADA4CCB77AAD0956
47EB85042766E364B94AF73074469DCACBABC2031D1E1CF627EF657AE572C6AF
953BF4821182D7A3485EB66391B6C8D23DD6E7B98A6869F882BDCD3130822B4C
9F05C103D6A4AAA3BB98058DA68BB2A3832DF7CCC162DB746AC013D8B9869930
DC632BBF73D29C7628D65628FF82CE9E7C4BD4998FD59B3BE653A80FE9B5F613
D694EE004270B5FFF6A79322B0E3862600E511399D2277B2CC5FFC22F84366DC
E096C8A45D7C6B4747986828F8B4B968EBCABB09ADF15E34CF987E8177A2048F
6A6323F0E42077EEDE58170D7A668F67CFB6CEA1DB8DCFBB74A079320BAFB1B4
D4CCA1C2F027943E6ADD175D8084B879063DE8582E22D22114BDFCBB3523F678
DF1F8EFEF78E6B8FB749011CB6C0E13EC199450346ADEBEF42DEA29593BADAD0
FBA70AD3D6D6BA50F3B17DA85F3EF171F2E37A1DE10BFAF2A5CEB3A5186E1F8B
B3EB559560B48321D13304ACF7BBB37242F064D13D6B8983A521A76144DE0ECF
7B67A456866F267F16FF962FF824B6EE64A8549657F10107D45C8013955DC1B5
9F6134090438FC46FC9EFF0C06006901FBF07CAA1D14C32C913EBC3E22100E5D
2C48A0C34BAD9BFFA89837E3403CC3B864C3624D26304038ED20A10BD898359E
C35D7492DB04AF9F639C37C53E358E4344DCC861FE9201967BC5CDC74961E0E2
AEB425DE5E1CF5EFEFC4E75F79007B040EA575710678CC2AD584D9EE3843D61E
0F5722FB5878FF30A9468ABC4B74CA4A16A38DC97FAD356E02CC50D48F3A9E62
82532FB4E0C9CF1A0DA773CA1EB721FE704003D610912188A7C335B9D08AAEAB
58CB4663A74350B1B52A253786D515B3B84D452BB131969A921ECD16A7A6CF12
D88B5EFCBFEBB68AF0AE1B24D89C50C3C5E12014F5B3F43B8E9FCE82930B44F6
BEFB14F43B6F1C9AD1C5CD4860749F82B3A8A72948AAF8ECEBA9D80D5DABAD3E
3F925A3EDF75F9CB246234648341F7EA476FC322F6FAC201A24F20D21CAD6347
D10AA8B436623A29EBA3FD688EA07C25D264FC424B32CCDAC1F9874C3F317BD9
709EB54D9FED607CC5FFDD5ED54A388D435F77C4739A2760EEA1E13AA11AAA92
C4F420E0B01CA25835853EF82D31F62E7BB682600A8226B4E664BA5687966FAA
D8227A3B7B3E747F88ECBB04F1B830088D172C5D83891F02CAD690671349E51E
27BB70D01A9D9C82E0A6F00B286341D2859609E24993F8CDBA7659191A7184CC
8904F1CB6C08648D2FC199E7A231B1E5ADC1B1C0306432384CB7E9FE9DB21C7F
F0D0DD31EF73C740116DFD59D235510146498ADFA8B3445BB84CC251373FA21A
6B310B6543A68BD36B44C979649EEB4ADCCE8DA607332B90B416ECD75C6A6CAF
0F78A86C8F13A64B2D8FC9DCD22CC0858814A68B1992E2713B7EDF41B8D5DEA9
54206B48031D05819009D8F072B0C3642D73F0DC0888547E01918C62CD8B4115
15E9AF95BFBD624A301AFC736EA3FC3065A3582FA9DDA9D25EE71EA484D42F50
E9B34D3B32E4D562ED20D6375600BF38AE514B57CBEE386F5AD114F68355BFD5
CED34936758E3640E406E862FD0B372E7D7204C19A9BC9D51067D20DA560B715
29D9A6C6A8F09D33613BAF4C2416A13DB5C2E88893852571BDF19623F4642DDE
490D7B4153D49631D0A8297BAE6781F529BAE3E2442847A15620B52C36B00FDC
9971BCDD43DE9B718EEE476C942965001F0A63F71EABC4D5F93D0F5E2EBB20AB
8A836FE5C9C69FE079DE096AE2A15C753C2A7525D7E9C1B848F11608A69A52B6
E932DC41288E7F8DB9E20A6228680535F9CE1CF3412E077744F57882F0245669
534097B1ECF27AE2174892E26CD3CB90C0AE3AA9CFBDFB59F24923B4E819B88A
DF6511C95FA90AD43F2905F0C24234404E9BB2790E779C81E00919CB110051EC
50A49E784598FB85558FDEADB3179B9ED5187B9827FF3A91D6EFF971F1CC8C8A
AE9F58F994F06EECCB6F438F0F351BF1A12DB6D9F5E6FA18555191DCCEFDF12C
D72C54E79F3760F8C40A775E861558E7D837166627BCFFAD384300F7F9D32714
6513E3F6B1644A9836465AD46B31A98C4433407C56ADCB2B7310CE5D677ECB8B
DE0C6697B0721C9567C63491B777B38BEEC165ED66BB4A70536B16D21C9A9FFE
D1EA91B0FA0BEA22EA252F7E139C4371DBF46D97FFB3824520DEF6DD0C9BB375
D677673C0FDEF4E5B49462029FE0D8D1B290D944C5A517F3C073FB182F08F0B0
EF4AFEA2A834C47A9D83DA86BEC9F3C09BBFEE80C5658CB3800E54FC85CFA32E
456C03E296FB2FE878F46A05FC7C1CF27AEA1C54455906BFEE799CDEA0B4313F
2779A43395A954C2D19FEE6B467C9BA9070576DD7DDE69BB9D14D7AC24A46696
7CBD1F34FA9886B1088DA196F8A6122396D00025D84A37603E8B1716757BF22E
8C9AF5B0F710EE174E5D48DC31D1A7C079E3A61CABF1DC0A1B865EF4CE9AB0B7
F5140A6B593373C3DC827274E9F2143D1E58B00BA5645082A9BE37C999CC0420
EF16E216B9D6E5A87F5AD810C2DCDA61B3281E95209C1BE8A01C392FAF4BA303
39220F42A0EF30D0935FE4C1411208E1800BE1714359AEE4461DDC6753A12CD2
F4E9980EDC628EDBB1F80F41D4D6AABFBD15C291404288A9308FFE1A810AAAB4
34EF6E01DEACCC6CD77B3735B2746F3E973FA3CE3FAC6234C1B5BA5DAA95496A
3D39132A62240BB9C423C813607E8FC207B04EE770F003897E77F3A476566DAB
C24B4B105EAD1D89406C581AAC11A45D6B9AAF19E31CE9F34A174A176DC81563
1DE8979672FA7FC9CF6F4CAC90464EFBD6CE5C7A5EEC598B87265C133E564A9D
82F77754CFF68E1D03036E9140C71C26F2838247F0E8FB7B005D8F0943A021A2
1AD0EF0622C91196A7475571BDAB61B3CB458EC25C775750D618DC4290E5AADC
2D65011D1934EFD933EF56C7FEEBF2840E5DB25F6551C9DA1821E249CD34A3D2
274714DC277AE0AB463D31E34DDC1CF7A5E1493CBC2160B9B98D664D54F54F31
63A9F6C9EC4B4128D2CB631D6AAD74DEEAC5186E11EF0228EF51671DA8F94143
58BE2491ECA4B9997CD2B0FEE5CC545BF627D5593BFA8E5F2385A82AA61AC34C
73B14667721A220ED37ABCEE05D007B513F7284EA8ADEB31D3C2433F79E3746E
8D399D2C861D96D9F2E7F7B9EDD614589FAF8A6EAB32B7FBDA0E684B915880FA
80F78DC7FA1755485C17A3C8D53BC07B43FF5D3CF62C964BF5DD56AC29FCA626
AD8F2663CF7D5EAE0F1BEDCCBDD5CFA01F238999893B4D50D74D2D6C3A17D98F
96E611067FAA078D8EFBF6D495234BC12708EA8E008ECCF280A5968EE62BB4F8
4DC5721AAB6E62BCE08FEFC2AA364C86FA3C5680B5843D83BC0D25A79D9B053F
28ABF2127D6886CB0D4C6AC4A691151010CC860EF9F7F51F252F7027EE46ED7D
7E8BD5F229DAF40C7FA40791289E92847455AC93F6B6D64E0F77FBA207BD1F74
F8AD4290B247A75BB4A4FA9EAF63FED8D92F8EF757EB177EDCA1CF32E6C7DFCF
12E36CEC9D84D43791DB078F275BDD2A1EB128C9B2C0B68F0002D93E10B613EE
2F0FE735C4EDB24D864100294A51203E2312DF7B9419A6CBD02ADB66B7F5220D
10FFE1D3FC7CDE97DE7B0A208AB2D4B29D25F3ED7FE72AFF52FBD415224F7E25
6A4EA0068CA48EE08426A35F9D57ED5A28306F2965AC93263393A328D21E9E2F
8F27128B0D375C40A1C6322EFAE3EE70A03A9A35AECEA65E89C89935A6E4D3B6
A6E3AD12ABD69724CFAE4B99D064D582C4392DC71ABCD21B8D66885B10FA0C79
F9AD2CDFFA8329C1AE9431A284196EA42804D2634A9682731C0B871AD927CFFE
AFFB4CB9FFBC87AF8E4158E6EC417C504BA573D00AA9D75A7F1A695376062EF5
729B9D209CCFDC32DA786523AF8F5594C485E5700E9E3817A4FE7AB2620DA9E6
46CAB8F478EDEE9840C46712E7ADB7FBE97B265F297945466C2B43407B408B7E
FAF7210D2BBDE2101423CC85EE8DF879999343065770F5D1A0400573F3B5C803
20F30A4DCA82391CBBBA0A6F39991E7DE591B40385EB0CCDEEB351FC0F9E9EEE
173D0A13B8FCA6ED0F87FD7C773F321C6D0081BE620F06201EEAD4C3BF15E18B
D9C681D7520E756F194D09647B82C14441C0A287B46490FFF69930F33EC8BEAA
7037F55F05E54737E141DF1146A717BC1C4C18CD0206DC5191FE1CDB0A136AC1
07F3AA0816616BD2C4ACB5DB7BDA5D91C23D2F206A0CC313043E81C54F669732
93D99529B8F9EA50953925DDD3A17AFCE7B02BEBF29ADD5B2E19D17AF3FF02C1
6CDC7ED4F5DC7C08D8B9A1A038798EC51FABB5E6624BCC65426ED158B7137382
F4F0C690C09DE775E0F34EAD6B080119699C910C9C75AEAC3BE7358709AD7FBE
F94832D2B5E0FBBA23784588B2C69BB1A62A9F8BDAC36F2E1A9394484F226B0A
F36B2771CC2093DD70FDBDA556CBFC6D1012C2A3D59212F714342E566139ADA8
53EB706DCE07B9674FE0CC0C523BDD5C13F3456D2AA3BF2C79EF6AE2F5CD58ED
15D6157106B83DDAE2134B833DB193425614E3262EB1309E15CA19D2AE692136
BBE8A74DC45C6EF8CBAE3F9A7CFC900B41FB0253A8EE7A57CEAFA62BF6DAF527
82A6489E20256C55C52940D36BB2C7362251A82A3522A163FACA4A4CA50CF766
02ECE9E7AD2E8A360CD033D80A82CC481E3BBC03AE8DFA188D9FDBC71D902517
052625C133E44909EDE13CD14B200DF449FB07BF4DD613AB7701370EBCCCC2DF
7B159DB14DB1548CF4A9B6492F4508DDEAE23BFC0FCAB2DD1DDA6437146757D9
E1DB089CCF50FDD154673B00AB9D542F3530EDA7BFA5A2326DB7406B9CDE200C
B25F0D9C5BAA3ED490967549F77F589B6DEFB50D2B9EBB5AFF48A355966C4A4E
940537C8100C6A9989E17C0FAE7C2E84E07BAE00C1853255020165A3046A3775
54BA447B61B3334A8A04FC3A8C3DE78382C1A5DCE6ABEDE8A55441208E5F0312
341727B57C5B44F3047E7B6D35F054B95648E567964BA8A73996DAEF61BAB889
E5ECE7312CE338476E89EFC0F384954FEA8E88CC57F41CCD36F3710C00D180FF
173D4F1D181DFC454D427870AF32703FBBCBDA181178C4416C9B5D06DEAA5CA4
9BA0070042F9D951C6EF10ABEBB1C57543FBE47263CFCC6EA86FB8F46939E89F
A22ECCBF1A406263E7DD8A594054FF05BB244091048A051EB0A4E68A82321B19
4B0737A20E8A2EB5E8F81522E25E2497811EEA67E1760095FDA6FD2136E695CF
ABEEEAAA7F1A9367C4417D181AA5CFDCCBA1BC8C85B37A4B340FD8762FB77B9E
9A6E7865498FCB382C721D12721DACA4B38F384DB10D03C77B5E7F143C40BE2A
27E5A8E0FEC1CF0EFCFE0ED9B64F9EED0F84E93B04D14D80EA4BBB0CFFC03EE7
EC2F804795AC670A643918C1E74BEC0AC3EAF85D8093D14D756642CB7161A0A4
1C6BE7ED0FB575F4EBE1F4C01B29CC7BC8CE437A16E6F245A4BBF285EE513DC3
B02DA6FADECA055E20A439B1C70B8805767855FCC7238D33CA671906DED22CC5
0DB36DE9FFB44D164558E46F60A2A7DCEE288621C12EFFE5CEB14C51EB915DA5
C3C76F90BCB157A8E3B2C18083348BA033915C0276DA675656C04E1D888E604E
8A8943CCA951CEDC82C054F19722092C56751893897C98F3C3FBF179619C9289
93A60AC39E3DC878DC3736111471CCCCBA9A3C2F69E8516972824505F1E462E2
72008575D05D154758605715522C08E19B66B6CF3129D861AA2F2A88350BAAE2
5EB55DD09E27ECA6E41A545A6C686F72F3E96BDFAB23634C9DEFFD130938B773
F072EC67B3AD690D52BD17B23E3608D51B3C8EB6D2ED6DCDA74B2761E1F8FD53
AAAEBC6C61022BC4321030752BF64260F0A474CF81E33334BAA2D6E9A92B6A90
AC11F08E2FB2087E6519695EDCFA78489EE69E0B379131FD6BBDAF5450128D38
0BFF93D12E2E98F1665C11DE18DBFEEB2E31C46C8A0302970473C7BEDCD99CD3
A950DCADB209FB2808904C30F7EAF14ED4DE5B889E2CAAE058BCC60C266B6830
5CB7BF291593A65A31B73FE992DC102B0B9D5017B667BC65ECEF3FC88D5462A5
74FBF1017C71F10AB30F30E2EB9BA2C975BFFB25D1109233FE0B580EDB92AE11
47DA3AE8311D3F0A9A347FB1CCF9D6F66BA35C386F64C98FB5F00B0B1CA0D7A8
AACCD2B674B8CFC5CA5C560ED5F939EBC136F62E3E0D68214D3178AC86FCE276
A7C0417B3AFBC9379B15FE9C7F4D08A5F91EBD29752A2541CD19EA29A6462878
BCA52845403A4DCC892D9B5999DF944E7CBE04A1C1727959C637F37926216F00
CE3B5E33154D328C2175933C1180DC60EAC61907CEE66D12A3297032132CB3E5
D905A80EA80CCCFC1B756D6DEA21FE9015DE5EE9F413CE0A5532490146CBE30B
9018AE3C12F2D572DD67D2F1FC41017B59F4AFB23BAC44864355FAFE77CA28E9
C15AC8FA509535733EB9E48BF1BC4FDB0C07AFAC7DA762BD26799A97DD9DD36C
8CD1C8091EC2E7316B8D5C1ED2C38D7A44C88FEB297118A6E7E1FE9EA9F2F05F
6453BC41E78065D5CB717F53DCB39A4813065E77E29A3810F7B60BC1D637D979
8C031840A06B47323034388E480CE6306020E122F624282B39429D76D70BD9F3
A8878E92D32A426BF1A12CE44BD00B646C940CDA3723EE923F61A77B1827F217
1309DDF7C4E9
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMSY10
%!PS-AdobeFont-1.0: CMSY10 003.002
%%Title: CMSY10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY10 known{/CMSY10 findfont dup/UniqueID known{dup
/UniqueID get 5096651 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY10 def
/FontBBox {-29 -960 1116 775 }readonly def
/UniqueID 5096651 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY10.) readonly def
/FullName (CMSY10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 15 /bullet put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A581BE543D73F1FED4
3D08C53693138003C01E1D216B185179E1856E2A05AA6C66AABB68B7E4409021
91AA9D8E4C5FBBDA55F1BB6BC679EABA06BE9795DB920A6343CE934B04D75DF2
E0C30B8FD2E475FE0D66D4AA65821864C7DD6AC9939A04094EEA832EAD33DB7A
11EE8D595FB0E543D0E80D31D584B97879B3C7B4A85CC6358A41342D70AD0B97
C14123421FE8A7D131FB0D03900B392FDA0ABAFC25E946D2251F150EC595E857
D17AE424DB76B431366086F377B2A0EEFD3909E3FA35E51886FC318989C1EF20
B6F5990F1D39C22127F0A47BC8461F3AFDF87D9BDA4B6C1D1CFD7513F1E3C3D3
93BEF764AA832316343F9FE869A720E4AA87AE76FA87A833BBC5892DE05B867F
10FA225E233BCFA9BB51F46A6DF22ADCEACC01C3CD1F54C9AEFA25E92EFAC00D
7E2BA427C25483BA42A199F4D2E43DFCE79A7156F7417ACF78E41FCA91E6C9EF
B933450D851B73A6AB6AEA7EE4C710CB5C14270D1674FA334686653793FCB31B
491E870D3C2BC654D2C1DE463EC9BA29D7371AA1078800EF93D3F66263A2EBBB
F5723697BF7448BD0D2E301544BECF497FD475B85DFEF52AF4F8F8BE445CABE6
019318806D10C5952157FF8F8286C1EE701545C8F60EFA854EAE66835A2046A6
915D395F1E0366EFE0C0391583FE001FF16D82A2E2DA5F57754A2C6F69306E36
356ECF8EFC3F1188AD6FCD2427E0580C97A5B69B4E0E09B85EEDE142F5ADD2F0
5DE51D6DB72B127412A0D57106C19CA493048A4F815129ABE767D51715B1515D
9C21067CB5BC88741B7298C83EAE36A866DFA87D8981F179B1C31292F56BBB64
3C430779468AAF07C8A8B4934E1E775FE3F35186BD1FA6EE3689C1C750678AF1
FBF9B23195A124C5C991FE670AC0C86FD39D2B07B9A319E74EFD498B45820252
720ECDF7294F7B0B137CEB86D33BFCEB8606985A3260FD669E461C8BE94216C5
D434FD8854F44EE66E5A289A9F9E32BC36AF645D53F96652602BAED418C8D726
BD04A1B4617551FE4DEF54083D414F7DCE004E6BB2DC9C2EF7CE232B254BA2C5
7DCBD36C2072ED46FF711F121A701E2284BF1B718B3164382B8F453D68FA0377
DFE106503B8401D4DB87F5402A3AC9A442FA060B0610A9524D530C7157C26B56
AC970FCC1D5655FFFFA39246E6420CF97D08ADFB7B05822679BD40C638DDF0E7
A97BFE8918B611A145AC965C203F1428812F9D340AF499B3A915B22BE798594E
0F520109FC81E452180AE45B170FF999C5FC2761C6CECD8742A5A6FC97F16743
AD4EFCC6572A6D3F3E4E330C5CB2FF6FEA48A5B64DD3DBE943BD9918D4A18E18
CBCF598AEFBB6AB3CD2CBC9BFD6099272F6543F3E532E0E21E614BD2880B1023
0AC234CB705827BF016DB84E00E8C255FDEFA0101A842929540B7B4AA8A089BD
5EFF05B72356B6BC3727817823B5CDBB1B963103000D7F2A4E2A1472FC3E614B
5CBCB6D6D784023173DEFEBFA8F9ED87EC1A0A9EE98CA59CFC964CF943DC683F
E9E00DA718C4425A705A69D99988EC6F152525C790912C2E46A2381A569424AB
54DF4798BC2D7E7A361E7991641D4B756CE2A7FF4A2848927092C59C2C4B8809
E13AB84FB6B111E680D7FB9F2FFC2C5C66B0B501E4447C2E46C10E2F6124476F
A140C404CFE2DC9E0199BF61E035CEB481D438139A9630934E541D261FFD2906
4CAD99E20655FA746AFB81EDBB5601F5FD6B1D6832A01D585E2C55053F6A7378
4DAACCAC7608DBDADAAE732D66B3E7F87E79756337C1A961E53A4651BE7C77F4
038B89C87F650C54A2A90EB7F1D525BB353F33318551EE8D84A6A83C718EA5A4
B2AC0F7306B1E095819B87015A90CA3ED739B09061782C28CDB36BA4BD5E5308
5CBB70414E4112193DAC4A1FA30996327230D1E021F3CD8115E12D239D93FFDC
B645910EB29E40D830E7BAF2DB255FD7C4E776557BB38157917D993EAC245837
A3B515147043574157B8342D829C7228CCEA843ABC89D1785A9672A5923FC4CD
2F3FF27E6FCACF84E2D3136CA2C0FD3EF1EE7354CD04C38B5FB874553646ED2D
CEDF7E362EADD04B18051F20A8FB0DE18E152385B9D05F98A3A7EF177824E246
455ABE69E2F700EB78185CCFC07E3B4C6FA301112528D977367D30D0D5D59EDE
FAEB706DDC970A9E296236C725B2B55B09B9C336B8E23CBA5FB8692D56F33B03
16294E5FC7FAA42E96395A57CE51CA8DDD77442F142E2E576B778373FB31C81C
16840BB422CA827E30A81829648BDF1CA36700EA32AD888D097C1FE0A05B2D9F
483AEE40269DF09AF0D1AD3DF80C45DDC59C2A03FBB661C79B87853737C6D352
67626B657321B16198DBD6DB98A092F17878AE4698121E1006E53D6F9B0A3BE2
3FB68828EF854A0CDBAA68B37ABCA6AD4A3D809AAF0BAB1697A81FE59C98C472
1E33CD70A75A22C249DD11D76C2575ED3370A25892A16D2FD569CDA70C130770
93F493C7D47D6F9A5424A7A542BAD726BFC3AB225DCEBBE6AC4BE006F8C7C0EA
051424B08305BF2D951AB2986AAFEA04E078CA79B399585BFF0F1ADCED02E15B
8765EB6BF6A8E4D0901EFF2C3AA104924EAD9637A35D877E0C51A3C37DA78CD4
8643C8CE6DCDDE3F116A6C2390F948E5371BEB5AD2E87B41C5F01FB5C196C436
6E256A88D082E3F46E4EFFBF605B2EFF1E9D9AD5EE4DDC323A137CD9451EDEE0
06F7D82898D71FAF2362C0FCF1F726F97F820305B7CE20728CA08C63575083A7
84BA28B7DE2B916432475510E274C12FFD1660A717F51DACFDF0A102D85224E0
D6DB607BB72569ABB8A7BC6A10354CBBC01732EFE35B72062DF269CB25EA3DE6
DC603B04C90C5912D2C38D7A5ACDCDD3F6F116D884F0D8C528F69D5D47BA20DB
0A9E585C7D8CC3C324FE8A1DF150279F7E8FB43BDB720E624E5E9918032C02CD
8020636AE5C38DA2484B7F4B34163E0D0A561B43B80E97746DC05C871AB620EC
C5D47101ECED4A7E25F291184BEF8B80024AA7BB456C1B83A907652B331DEA34
754226C39C6889EBEEFDAD081E01EF8FE47751987667836FDE4C8BB8A3FD4406
1E643B4EA37BD370734D1A2DB17C2F4B74B4ED75098B433601F75A88C9A37A05
CCB157EF6E32023BFA33973F3E655A4D58289136996FCFA61EEABD70791B6523
1FF5DE71AB8A17038923118A5EED8D59C4C58D246FFA9BB26472346B40C8741F
153D19CAFF20DD2A86C6DB89154A630FB1761929FC3F0448EE2F089C1C953E02
905BA8DE75D101A982A611056C4B237596C10951DD98BAB838B742D3CF7DE718
617DB72E5268583223E37E029D1C8FD3F1D21690151F76B76C52C725CA135CA2
8666553E863CE188BFC9B99AF56AC2DB5BFEBEB12FB563D00244EB89E478657A
98AF2E1223C1ABC25A4500E8119B86EB3C26B8A2F3505A3E5610F89B7C34E278
53FA0A54A7F46D84A35EFEC36AE660A9E3C37EE3864106702DE5AF6C45ABF64B
888A4A51323138CE77DB935576FE6B4824B6942DF80625098CE1B5B32B234F1D
052A9D6039697118A9D793793775D8729D8574A2E74D7109C7B7E23BC5E2E87A
CA8E019203952A4892544E1AD3D4EDD22971611358AB230E9A2ABDF00A288501
A01B67C42B33F6B78C39562DB50F4663B922D9BE0D8A150311AE44B83C1F129F
07337323E9A23211EE58E16043E127C6F9574019179F5635648A011266677B56
B5D0201A4E1470B952A1579B57AB2329CD4C615395023C653F784D36B5EE3672
10D191F29EA508CE84763CA4CE7C2C5229E38E241255A5CABCD6C7CBAED901A2
CA53B5E24111921CDDF83578D33D463D70EDACA0E470D8F592303FB6BFD68B4D
3F3BE2D7C5EC8BBF10C90111A33E205F2649B56E8443F6FAA6C721C66575AE12
D4C40F1F46CF9E9DA675AB5D5840D938780CD9E4AD6736ECBEB6A4397613586F
849B51048AC5F9405E03E14540A5E5582F61CDCDB57EDDF95A8C6705F433EE16
648F098C03DED8A2AD94AE3DE202D629B9422ABB031318D48F2C85F9DBFA17BE
84708AA3B6C9F81F4508F7A5CB7B6646AB8722ECF817877B77D473F577556DAA
2BA0ABACFCF5DEA7498C47328E873019A956FBB250FD9D8885D21D368FA70CBD
2709D2DA44EE7A9869963EAB48789541906DE49FAE785ECE1F18A22C7E7ED204
9768896B78E9EB7A2BD6EEC1B26083940656ECD689D92942CC8AF05CBF82AED0
B45A7DF4DD7AA6526FB597322560B9ED3087A65B5EEF1371C328A021411BFE3B
D9B5088B2F1AAE381FFED52D2D1E02CD0DA78683E3B06171CBE94BE9760005D7
135893D7CC2DB097F6AC664D9594CF1C650F84DA80D2EDE04802DBA33CE3DAFE
EB7A37E8AEFA4FDA6252FF21E8673DD98E67124D5DBC7BACF361E57077B71939
C1D1FB923E4E35C075CD1BCBE0E80DAEA1320D55B43EAB45D9B26C366B278782
7519FDC482D98839BF0DF2E7C3A56A1C1A3FC0E57A75CA414F6536C1FE8EB7A0
4ADFEE3BEDA0F53BE8CF5F64230784A797133E8CD46BCCB3BF38BCE38A73CCE2
9E073ADE792F7128231DDD1F63E6156ADB2609C200837C2E8A2D93D2A7BC9171
050C709A71E44E32B1B03C92EB5CF1D3BAB1C38E027DC4ED9AED633D98CD7486
3F773ACF8AE332631CF2ABE6D606607593FE862ADE31803964E3F4DC3CE3A271
C76BDD95C87CDB3B87BC26FC7A16D567EEC62E6FF0D471B4853DB8A94D4CACF8
843824F818083F10E88D52FC4253E8203292CB40F1414AE7E51DD7347007C342
CD70E8E9F2D2A13D71213B841DDEAAB208AD9EA644591C15DEB084165F9DF24B
B91D3BBEEC2E34E38EF16A0C3F00700A7BDCBBFED2EC0D09601AD6538288DB50
3478B051B5E16B604A0341FE621A58718D960D699D3FAD284310DCF54EB13175
19A75A539EE98E804AEA24689D3540F0F12951A3C01FACCE9A7BAF4D0DAFA946
FF65A4D2A4C39969607272C6886F44E90ABE27CA3A1F12A29D9B32E60E8E34F0
17C5FE43D0E69A99A922D98909B2BBCD145E59A5E7F5426B3988F73B09A525F6
8BD4915663C1301323180E760BE81CB874B020FDA3AE63340E4261E4F3E4949B
CC0966BDC4426190BE9F5D77F76A72AD925662E5FE1CEF9CCAB68F0BD33DA003
F11EB91AC4502FBD6AE48DA0F9D07C35B96B103E379B8A83A05FE728F1716194
1F650F75BEBADB2E3810388F3E2DC7B19F1BA9E32925F2FD9F19F4E8701F3E4E
4069125D7C401144740691E7A460021A47B1E27997FC1DDABEC5BD0EE0B20194
2D579C7D6727AA124083242BDA46D8E116E2751C5F298851A62B60AEBE82A929
9B9F2492BA35690D1EFD16215B8EF14E7A3803B93C28FA41D971B05B6AF3B593
E74AD1E68A5FCE12A86E63B78BFEA87D3949FD164F12277A4688BE96356791CB
8671C49365608F3EDECC109321AF92B4C29CAF073DA3A7D73E913D0D83FAC5EB
BD884D4C686056404DAAAD6F82F94F803FA1FB0DD8908D1DF08FB87A8BB83027
04DE0CBB1C6FEB6B517FBD7CF065120079E608CE41893C2BC96A347826CCDFD5
C69E161217F2127A59F1A6F22037641613F191F22D5B4CDCBCC2EE5615623404
ABA7BE6C5FE475481615B2AC1A2412E54688DD21E44CC9AF5F16E634AFCA389C
4D740B7B51BB141BFAD1080E7C726C1606A28ED492E6BDE9F800EFACD1513909
84E98CEB6A0B7A2A6F3E1D1DCC3B2552795E0932673E59ECC56DDD37A1D52BA6
C3F0E905978AB568941A163F4CE3AAB5C5B16F86016EC47BA6F3F7AAAA77C3B6
09C8C3ABDB6D514A76ECD37C37AA88B5860630B3406B494F7725975596F84777
D9CF48686EC9C5DBCC1D78513F591C7C10AB9D153B3D41426B7BF668B0D04503
56BCB686258462C1DC61095724B9F3312316262FD7C1AEC6E54DE7E5A7BD8EFF
035299B8FD8A4A7B0F51404F4A760F4D8B4C0FB7A32FA4B2383AB6E9C78FDEDB
FE6A5788D38A6701B123630C2A6D820A684166FBBC83DB17069494FBD411B333
CB37E2491C5BD035A33867A6D3A3D420CC31ACF43AA07182CAAE67E40EC63663
B678F71D4C6E0EC3A0AAF904CD3AA66E0DE5E3CDE049E94249B39A1C06E3CE9A
F974B2484BB2CDA14282B9511E505B3C89F9C802218AE40D1A7541335C5736DD
CD565D4B9F4CC78F3A393737EDB4FBD0DA299E21CCFEBA5478EEF013F0552A8B
0BB11FF46CCDB784E8BDCF730A16363E66572049E42C695886EAB42A9AD9094C
B635DF4B5B9BD9B9AE8455DFA3EEFC77653190F9A8B1E93B7281C2A21EA7DDA9
33484745BDF7E3DD63C7AC66C286C9A5A698A5E4D7A91710B7FF943FB23609B6
4B442F83CB795788FAB5E9CF3F75D5487DA26170E4561C7941C910B088C3B86D
F844B0F340CF82786A3FCF347048463EBD2006281A816627065DDA6CD4D3AC5E
2024BC96C7D896381BBB567951E7A1F29D4E95351298B000D29E5F3D0448CB5A
CFDAE1BADE9403B90371C3A07D208948AFA022A69C519434B6813086ADF518D5
88E0B92072A44BA1B3EBB630A13B7AB90992E85B6D67361C8D96F3E0D826FF37
17B67E4B1EB7BADFD98D7F4FD17BECE740ADF13C141EBF0A91CB105DABB32FE0
55086D56A0D358841D15FD349E6B95512E4EDF4C430216FF85C2ABE995E4B40A
A6044CC8820AD885C07E052B3F91C2E9A1D163BFFD210F7BE95B923E2500DB50
2075106DB541C267BD450B25B670CE80BCD068D4DBFF2D82634175B61FBD3BC3
406131F44C7D6F18D375D1F2270829DDF29DC14DBB58A30AC193245D18DE91F8
AB88AB548D8138605BB5A50073295534E314366E26665AE70482B890E4101D6B
60E4F3B37ABCA1346DAAE8FDB8DD9C832EFF3E73BA470E2BACE7B8515CB43388
C27AF99FF9322175CF8D4947E6B3846AFF5163E972156847F58A66660EC8A3A6
5FB47C9F637B4CBB4C73B6A080B0CF6FD1E9665E92032540570FFCC747C67C50
822811AADC404BC7ECD1673E8AA6C3A2F1D82F39430B58C29145E2F1B679C46E
94EDC711883F1E4EA84117A54757E8895A40401A26E1437B39A2F65CAADD6E02
D71FA8AF7453668DC613F326A3344F74AD7AC67569AF399385500ABDA5EDD3BA
343CC5EDD4B558467626850E752B9959FEF1454E53E7A3DCBC2255AD8F6AB4FE
894455118A61C58840CB68A925ACCAD75CEACE863D806916228F0614191A1CD5
DC9BAE256018615AA3725834519449B0A88B4F396654E74099C007930ADB1327
DD119BF799FE3B0B223E1EDA04FE2DA7A1C879143E1C33B6C6344F4BA033AD6F
8E88C33DEF1977796B454BAB2494C930F492A518E8198C708A75FFEF8C49C324
A718AB59B889DED521229E741FFE53F98EBE88B0405AD523254FD3FA4BBE96DA
DA1C27C1C979A0DD4E61C3B1F4C4DE01E42F1C4435EECFC02D97994BC8AF5270
E7CB1458D76ED0229C5FFB4A23B8716018F9050970895D51722CDE8F2EA3D947
DFF374D84915D5C5D16463A6FFCD079D1ED416C4347BF831FF0C4ADFB61295DC
4D5785BB0852BF472CFC97EC174491CAF961AB90629F055E75DAA6D9898E8653
5BCF379816CAE46FEA62E7BE8E9B953466E51828172C4DBD0E1BBAD1CE28B5B1
02B3E36403BE80B49A47446A6677FCED438F01D60EB10F478C89528FA337D0D8
88D3FC123C076507ACDAF783A9A6E24ED73BF24B6E0F11C13E532DE5F70B15A0
657F5ED27D204449A841ED19E01432CFFE928E921321113780D036D34F2797DE
D4459CFD15BB117B5C9745EF3CD2B296D91FAD48C80B136D94476967E255F808
AD2B5D522ADEC64176833756510391815A1D4A8DA1D0AEE7CAD36A1D161889F2
3347D5B6BC503300FDDD48F594F391D5FB42C42113C538E707C16EE24A3F375E
7C506E8F49CE50FF9DEF3B4A4C1BEB3848EAA3477349833BA22D2A9012287D8B
A8C4CB4307A1188ACC0E6E9338E1559BE5FAFF381BD82A6C71C267409468B3C0
2C1A29F4281D565836EAE57F680490FEA4A952FF64C8CD11C377C294DCD1EC25
CEFB2B6DCE959D0208F85B6E32E9B44FD455F9B134A5306D95EA29F37BB8B86D
9E592159338E1293F449380E13C21AE42E692F6C00B521F7AB2F32545952358F
0D39246DE215D0A7EE67F377E81F9E65B25658B7FD97FAF98C7EA9161530404B
62B9AB7A91C863095D5433BB06F9A29488DA84D58A1394AD7878BB27E3CF4AF1
BC29DC64F319758518AB652F9E8BCA586D3D2021CA860F84DC0A2F61A93B6B44
F08A7F7C5F36FEE9F5D450D19F72C09580DDE2B3747D8A1054981BAEF31D6C42
040D7D5F37DE6DE019849E7C7754DD27E9511F9A9AFA4FB727695444F739448F
3D2021
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: NimbusSanL-Bold
%!PS-AdobeFont-1.0: NimbusSanL-Bold 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Sans L Bold) readonly def
/FamilyName (Nimbus Sans L) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -155 def
/UnderlineThickness 69 def
end readonly def
/FontName /NimbusSanL-Bold def
/PaintType 0 def
/WMode 0 def
/FontBBox {-173 -307 1003 949} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8D62A63193C4AE94C086C1
552833DDD8F116B5DF33205AE709B3AA63DA7BEBB165B67281827B48FB5EDBED
02A1A5C0784FC57D3487DAA59520BADA1BE3FB9795669924321CE4F466CD8E3F
7E8EC2494AEE80E2DD7A48A6861AF5B9F0CCAA4A2FE2B03498EACACD6B9C39C6
A8F2E39E06BBB061CF2EC380A32EFAD0B790974BB5CC3DAF0992471456967362
77DE34813F27ABE99302F86BB4D293A37F84667E7F3DFEE4CFE9D1A676A5728C
AEB5222FF50DA97E74B2CDEBF725FBCA7015A188891C8A376B9DD8A642C4B184
B1BBF3F376A6D6E31EF1C8354DDF8039CB20FAABCB34D4749B3C8C8D6972CEB1
06B8A5AAE3AE40A91F1F2B1155681A9CC933F87528C99A2B0268B43A3E829E7F
3BD863CB52950773BD9B0731DC4992541D7DE7A055CA65DDD2317F1705C20D1F
93291BCC254CBABA425C032B3B15050D41DA14FFE1B3D684EEA428095A01E931
98D4F849B239AD9D79F4502F0271AFFB0C297F2F347BFB9C137782646F648F77
0076B85F5A929FCDEA2703333F6918B8F125627F8B505C688E30F258DED1AECF
2C86EDCD88C29249A8081731737195FAB7ADBB54743BD66511194DEE2516959B
A20701E2D97342248297425491F6C9471EC9A98E630D734DAC19721F0B324432
C8D7A0B751453F89F7008BA37BC48E0831EE3ECBD8A0A292D63CFC890B28F695
9E29AC3B4DDB78A6883B9272CE34A012A82ADEC0B6B641E3940A438A098CCFBF
C50544B94FACFD9D7AE09AD0632015F81D2F77FC6D80A42EC11D67D8A91C376C
13C8E3444CDFDE4D2A1ED021410F4D6A4E97804AE949BD913094D23108C9D384
56F11025E2D24939114B6BCF579A0315C52F3CA1BCC2860FC1A0B9FB8A37AE2F
C20C0FD44D215FC2AF737FD0339B070D54E664021240071C665DE4170DFA182D
4E385685FB41A2D85888B1149E9A766CB4F309B4E2BAA28CF1F8CC12C1051F17
7F2E8FB0269F00A8A4C9F61FC3EA50B8009493921D920566ABE35A041D01F286
5E2B3E574A9E9A78E86BB5B788713FB8001C0435A2AF29BEAF8B3559A6C72748
CA7C539201BEE06477DC22B9FACB1CBD29E5647531F694BFF0ED77A7847F7C74
1A9C3C1FFEF085A5A87B2B8DB8234F076977B28129676DFED92BF005A132A12B
0D5D3B9A4AA4A2C04E1AFDF8A6B5866B606CC19287478BFD6B8B213C19B39853
2835F26AF7F37F7F99E30BFB9F66A8A8833F7D42174025AAD93953C9F599E8AA
5B732D60633B59C2DC5C080E7881848222220A63605F00205C205B35DEFCEDB3
2E261F8BAE46654CF523D136CCE8B52E83BC623D906EC7632CB075B9D013C926
6B223C04EE5CD63D144DE465DD11AA26F59E2B12CA1CD88BD95ADF73CC036BA1
DC8D789B86226E38B0DB3AFD1891643DF69770905D11D3022EEEE058F0316E77
0CE494F5D25F4667FFDEE2AF8A30E836B33CCA7986436F2250BA687F453D4A5C
F4E61DA5C2E238FAC478170AB546E2F49FC971F94007E7CCFE301062DB793BF0
C98D73A11770D4FAD1B1B8D4D0F6BBFD2C717646CFED93889EB779D89DC56574
6F129EEAC3CDF33EC8821B502104FF31590F567D1D45E3E92FA14AE1F634F3FF
687E1FA14432BFB817DA2C19F0C868A3487600CB5DC8C1C1417C3167002ACA1C
42FD6A3D4358B8623588E7D3EE02742930F99516B2597A022D0A53242609EFE2
6FAC8DD9F8B47025E7F7382C9A9E7F700F306AF2E28A1E1E66A349D53C5A5004
547D9E93E0A89BC49059B8112CA0DE3C6E33CD720EC4BC07E03072267E8ABE97
69AB6F8A4D5C2A8B0ABF3FD27F2823662C07A80565D4311B23CEE3EA3747DB06
6241C94302FBF237C39454C67E01F68736F187FA748D79F84B7CB450A9C45FCC
932A106B5B2AC85293A25872078E4CAEA2436B0A872F31A131A36FC8FCD291FC
EC5A6398F275C8CE4CDA5E898889277F0155E365B518E36D76BA889C4BB94D6A
F4BCCF762EFA3343D9C71DCEBA2CE212711445CB7F88B44D610E558EEEDAC38C
BEE1908987F62A68AA0133ADD133473E155533410E7973C55758853247CD330A
6B61E039648CF6E58A173FC3D7E1FC670322A4E259A6A165FA1558FE561A784F
A50039F200BEDCE7F57392C3D41C5698C9C8F8333B9CF307E9154793EDAE22FB
A40092AF1492C9BAD7095BFE6125C188A53FA2D0813AB238367A14F0ED1EAC26
E444B6BDA89CA11FF988ABB796B6595823707D1A37CD0C8A8B3F7C350305B273
03AB8B016B22376C8C335B8BBA0DEF974EB6F862421F6F37283AFD0F95C4B889
F3E304C34BA795DF6289C9A8490DF490915711FCE65F1E5C1E4EDE5B900212A5
FC7F4DB2C062A1D97D9F3BEB5DCE14B6D0ED3BE5D5861FFF3215FB4ACA8A2DE0
CD63FF091C409C919A7EA8859976C26F66170C35D1CB9B610BA0ABC84FE197E6
2F075FAEDB6E1ACACED6CCF2B14846294C55F890EC1805347D10189DDBEFFC14
D6ABBEE30DA2A9CE7073E02324E9A21A5BF2DC34E176790F95B5A683ED8DA838
06CBF2B803C94B5A13500607529FDB1612F916D7D98F158635436B1C389EF067
75979DC0DF7EE8E51C4BF6C70BC794C6BBE8A2AF220CC3567F94414FB8334C42
FEAB58B02F67E9CBC1805770C5FA1D755AC45ED908F91532280A19FB3855670E
AA8F06DCC288F0FE1CA765C93BBB6B7085F338CB5289A5956D5F3C82542C5E34
CF79755AD77532B5EF51C2BE4BD5C06EC31B9DD750BCAE53BFAD5DEDF0222B26
067EB335D3A1D24A140CC6F18AC06BE434B641468659DDAD740EB943B3419CFC
7A50780111227DC4E193AA5B83232FD3D730180D53977A8486882B371F286CF4
112916BE510949D72852EFA312D24FD4CA3E118B8E501A158E01701037CF60B4
13ACC42544DF9BB43E5B377817758334E2859DBB6B39604CCED3DE2596FA8A5A
7BC62D328EF957C8FD2434EB41EACD62E7A0BEE16D7A70DA8AB9FD5CBF17C5DB
7B121387245F70FE056BD7E62CE534576ECA6758638692C5E735F069C3B10DC3
942A9311F4E0F514DDE067AAA5DFCED2BF8E7218499E5C64B34905821866464F
D55B7C587836B5EA22AED62B0849184CB8B039CB558C03DCEB77D861A4D06B2E
A6D76994ED0D0F53168088FAF3A64070C25485C5305AD1C178801ECBC94D8EC9
B9B1893001DF06477815B44107090BF34DAF1C8BEE328017107CA00D07D2B7B4
077A47650E4CC2AC581FBCA20F43EB98B9B2309DB232F240352A877F875BE5ED
4EF6BD927022A4B0AD768864D2A4ECC1782B68440F85EC2B0F3684CC2E3ABAF9
547867F6E02B76C71D687633DC10E98D37B61C6F8255510D3BEAFE5518E1EFC5
BE6D854536970F90A9E94130708A745E021D5F0688EAF70A5C2F24D5418B090F
5C06A18D189F8FA68366077AD2F297CAEDCB66DA11A4D7DB602C3848C92DF4BB
D30DCF751C958F5601F999B512A802D6C9B8E295CAFE8CB6024D40E18F1FCC7B
AC5F8737435F51A30DCB0AF7C988AB25F12A87D1E1512FF71BB41BA78335CFAF
B9E1AB382D2E56E5EFFB1B3DB786B96E5849D43DC9D1545A8D74D8A2F9615263
8A084A6907B099BEC7CD38699015DDFA5E32143ACCD729EA754863FD93CA0F1C
D26CF593A7326E022BA9CDF2FD25D9EB3820144C7EADD2B7564578EE778AB577
C5BDC9D3A7A81AD20E8FCD66328F497DDFE297ACBE318E41102BFA3084DF1A69
D83BC517F09C0F7D604CB8419423AEFAD8BBD5D9B2BF18926E27341D514047E4
BE26B0A5A949B4CB901556E63BA98BCFEB32FDB6B32C3DA79D38D78EAD1B3AAA
9DEAAA6C9E414B78482880A53745A9CE85E0DAF7A5C52C9514D9AE604D72279C
1B0D815BAA509E34814EFFB087BAFC1E1CBCE43648CBE8A4B67825B85658D3E7
DF57DC195A9889848CC4619DCD8BE4646F1AD41382443B053E7EECBEE3025657
B586B93C0EEB387F05DA59641089798E7371E0E8B743D00F0A5BE80032899006
5E12B46EFC9821495D733FE7E483A65C979CD96F67B5C4C8A6AD3FCE5339E174
4FA4B63A6497C0B276424F50CB186BBCB369B984A68ECE37FB2A85057E484FC9
0BB66AB20D45D6A73676C3B9463A89A504AB57C377BB062C02225DCA03E64A30
CE29175A0E7D978742CEE7D5CE5A41AD7F4A2235D29925493350028443C6EABA
F73BC1B4BA5328595CE71CF29780690190D2E829323F3BA9F7ED7D399CE60CFC
C4FDF3704C77BCEE0DD24EBF066CE4E6A9D2F2514FFC51223EDBF645427399C7
CF99FCAC032AE6436CC7B6A8BFCA634397723CE024CB9A1A8115CF0DD104E0FB
A6D2813AFFFB6256C6A72975F6E5AB21231E05C11E494882452EDB6FE1780BBA
9BA05B63D75B801CCC7D1D0E4A13B262BEA658AA67B8FC1B1350787A5B9D65F5
C97BA8936194BEB61340EF3F8AD3E1BBEE76504A57187D6235449DBC3F67808F
284D54006811C667D630F8DAE7E913B670E14D8737D0FAD3B909E0D508479848
2BE9AA96C29817D099B597A18C8CFA0C4C3D74F591037E82E12B021B0DDB9A4E
6BDD31D495CB4679DE9BB20B0D17907C7324BDAD4FB98B47AA8C26BDFAD69562
9A2F22D1B498CD44C3A60255A38FDA57BB32082B0CAC437CCF26D8A3A652A3AB
510917AD26E4B8FBC55FAF6059B888C077EF784B2FFEBDD358B4A51C150212AB
6E38EF1869883173A8BA72AD88D7D4A5619E3D729125DEBF059D69C1C79A235D
5FB56EF40B8055121D30D910C8446EB15E24EC8B8568C3F89BB5C7BDB0D1D481
F6C7957C5EFE02369EC2A15DB264990F88846161C2315F6ECD7F1F9BCFF8DEB7
C4F568157D3A8534774268512B103DA380338006051DB64BFD42BCC794B3CB7E
76C077A282C9EE802D1F1DB0414482E6D97A1CDD7F7323D4665DD42FA9522F63
0CA899A5D78A360E0959622F37F811A9B7270AC4A6F7CD311C5443FB20CF288B
1981CF8CF75B230623DD994111DEA29EA8363B87AF5752CF81359A69CD68985E
4E89B10EC7E4F6DF9F3AE99A63804B552B8E4782FB69CAD950251FE65CFA9409
618B7A997CAD4A9AB570894F5066825B36D6F9DFFFB2446C5E4573D18CA9FFB2
FD4B4817B77683B928ADA38C83DDE286018FDAFF68E332CC0A56EC7307C97977
7AFA0CCB7108A47BEEA0BA7B521DB6474F370F7F61CC93778C7E73746B4845C1
ADD96ADA56EDD51EAE468819A5BDFB1FA225CEDE409A83E8E129216035F189C7
9F6A5B951A62C61CA09986FE78AB822F010178623F8E3A017B8EA43AB9F91D59
E06F4504F637137F04DA24B46BFA3824DEE4ED90AF97200A2362840AB25D0581
58E5F46FE83489D25BC3D0CB41B6EF1689CA159DEE50DC766B6AA3E22FA3C805
4F08B93DA9B716F6ED4C6240C35544361664D6310BC57C06DF46AF95D2545AAC
3031C17617E9B9498E14D2BA5485B90296DAFFB1F0178D3B597748E835D92B50
7EDDEDED0335AA7F73D90272AF096968AB75F3F1EBB30B5DDD6A4E8BB3682F21
4B4CD39727CE28B6FC638E55474C5C91BD5C16E7C3081360CCA5AA4930D43C04
A454C2D40D6E64611477CDCCAB9751FB220507F8A42C3620313F083F9B89D790
5696D5F83CCBF61CFD33CB08A071A6A762A521998F4EC5CCB1C440F48C7C20E4
9586F40A5A4C143C1BA0F0E5220558C6828E9BB6E69BA97F1A70452232C57B28
12C090F7E38CA5FC70556639C88A2E0976C2C2C791A9E516F897EDA1E34ECCA5
317B6D718CA80C3DF3982180C73AD3F480BF1F528999160D492D1DB46E2F336A
191AF7AF7C269A7DF72C20FD2D8D13ACDD45751052ACC3AFE91F9FE0750FB116
8E8A8625DFC6A3EF54C04FD7F511003BED54C6353B2953EF4C1C2352C31812AB
0D254BA3C8C6DB174B70C26E6D31B3BA8B5348DBDEF5A8ED29D81D7010531EC3
86858F467E35C43F3549939812A30722B97626494F6734A66795353D334E2F0D
511B900886A20B66AB0F431B0CFA59BA1F9102D5A13462EA9A781AF38A003371
CF4CBBAF6D2B8E6EB6B1D5901F49F47223711E339F8E4703D3FD9EB389365626
42896A6ABA90C508037E65B10AAFBE4FB3B89F357F7F55A4ED79881064CCEF0B
4600A60B7582D25C82ABE700E552103E0E28D8A549ACBF1B3D209F56DF0ABC29
6D011E2431CEB2D268742C186F9880FF57026D967F61D836C0BB1FA32768F6EF
41C10C6AC092BF17A7264AE1EB3AD3DCB53F6CDC1A80619F155C662FF09E1BB7
BFFB028B61DEC55C94E4D9879FDD74E453928E228A72250943B70ED0FA864BDC
2668BC94A2E2D05113A9EDEBE806F8FCE2BC688028CAA851F1E384443B118DD9
1FB9AB5483A48E87F913781D3E2CD77962133D651C49C701002EC6C42FA73101
53961BB2255BE5E9F56D116C1AB1FCC7D45D8F99271C0A602AD272D7A89F9D21
8170F2706C1D8452EF03BDFD7E31470293CB6421E326248EFE11BB4B5E6DBFE7
C3D8499434C22E0CEB6051EAADACF3946F2D19C9F30E69C47FEDE24B2AB2130C
87FF1FD188FF761D12B033D6335601054F2DB8539DF4EB707D496D25C5AD6B9B
2022EC2F0FA2C3C5B4D2B4253407BA019EF3C04E5388052738F267D1A83E81B5
F47D3C4FDDCA692FEA29BB618F6EAA5C27D7316BAA58EA64499CEC98B4259A02
B03655E8DB9746DD2FEFC831E454F8D0EE5E9E36E55F44252B5C8AF0E7962380
324E37079E6B44A5F9EADF70CDB3D3062098423F0905CB5478EB97405015B765
15829F413DBF6B1AF595E6A2BC7124AA19B8FFD2A035106F607BA485950A06C3
D81A0C24665E3854181204FC14260913F3F7F6263511889FCA594C67D348CDBF
73203755E937980EEBA6C2F9B449BC0EFA035D636F990CE0452C2670F350E3EF
2B3823D5FEFB3D7E1F335DD1116C5CB9AA634831567DD71900E8779661C04B4A
2FED16DD564755F1A82F34643E8774168A55EA53892D13393E1B89472A16BBD6
BE431E08EB3C5B69C0F653FD1F267F5870B5667DDFC36995ABA438032624891D
3480D1DDD176CA14E2CF2657A2CBD51A828AFF6D632592EAEF5EF11B64955CE0
E0F9E09AAE0792954A1F2C0AAA8288DEEFFDA6E08F837C6B8E6B2AEC3E554025
33D2B8E7897EDDAD9BEFF3DE2BD2DFA545A711B2BF58BAB1D382CEC2720EBB84
0E36344E84B603738B2776D1C11C1CA08BC250CFF0BFBD240FB7E694DCFE132C
C1F6E0EAE7BB26824CCDBF42A35C877B7220B071C881948DC8A4F0AAA63E66FF
2C89DF5564E019F13CA5BCE9F4B6F6A09A319D14ED56EDB0AE4C1628DDB2703B
38C230046EB6326E60B4138122730C52B316D0F8325D7994E5444B4B5F60541D
9E157F44AACC55D51EC4F39278670404E541771CDCA5BCA8F492C4ED21BA3521
49BCA920BCAD87F68AFC4596DA515B4EBE13E3944051B8CDE12CC0FE27A46BEB
41E9CE8687F60FAB8BA548FA051CDD0580E8C3CCCABEC81D8D642F424FC890C3
AE6BCFBCF08208F87957A6A15F77E1E234889B0FE75B3F6A9130D8AB0E603430
7C674D9450AF3670C4E6AD8D4A825B2AEAD221FD1572A0EC8FB8536E6374281C
F76D37B22E7AB0E97B3290EDAED775EAB0D7D553F222A3B01D12D844E21C27D5
FE8A6DE4CEC6967E6F066F7E0255587FB731973544019CC2AB7C9F1265B32E13
A33A4B1A6E9E3A6348FF0F41BFD3E96F9737FF3C885E083C382D1B2027DD79C0
48B6BC06A44D455153BCB8E3E01067B3064DE2D6B47F9998114BF92E9A4D8796
FB9DBBA8CDF19D5AC335E9BBF6582493B76EED4DFDA8409ABAB35BB2166D0EEC
87EC7812F2BA5B7E65A8CBAF1224F32B0E4E344E7F2EA13132B13D2D991742FA
32794369CE5F386C79D1039875D6AF463AD7A82CD936DF495A2A25D5A813D3CD
D60E2555F78E8F619A6D4BE89C8BBE4D6D0BA481CBC6489FD4FC798ADE1E4827
A3FC408EC625E310DA3E7E84BDA3755FE79334D38AAF3D8AA252FCFC89796D37
80CADE9EA58CC3FCFA08986979D861394B757231173420B130353EAC9DCA944D
B50225A75A1B90B73079E26AA33FD37B81F7D60DEF55CDD9E3811F6D24F00B3E
E58C56CC7E9CF8704FFCADC02B4BC10A55DC4DB309601C4181DBC8C580ADD685
C6E30B2DF93966CDDB526EA5A13EE3EFA361F9CAE4642C80E1C822E7774D2E36
B7DC679E91F344E2181C9631F5EDEF12F3AC9421A46A3FA3F6BE1B968E6F1750
A2379DB2407434F68EDD3146F06908511919B231806F37D105EC57DB9475A027
5E28FA08B0EC576AD591F8B27AA64D8F762EC507A3BA71D96F18FC65FC73BC48
4C694E7989DA0DAF6326072445B8EB6B442F7B4AB03A95CE57F47E598F749896
38A37897AA76E2ACE2D20AB263B333FA61B73AB2771190A524F27EA7699D030E
E8286617F4F304B29BC0DF83C57E51D786AC9D67A29B5EE00BC3FBF1FEFCDEF2
27613BA12EF2ECA8E6A0BF1DB857B9EA17E35850B2336E5ACD5302B6C3BB4E12
1F8479C2693CF953FBDFF9AB4F4BF2305BAB04E63A4BEFDD8B7CDA0CEFB00506
BBF29366FD7220DF1315C0B45789F73732C22E04D8ACB29AAEB67956202AFD66
37586AF518565506B7EE5911E781F949C64743A69ADF328A7423023B106EAC65
E305DBCA56F149A99FB608CA68F145432080F85C7A93C587902727871A09D6EC
AED6F39D545D98FBB6FB8720A29E204FBA48262BF84336F717ED8E2C8FB23A48
90CBCA6E0A3387D0C8DBD7D39599C210085D269E8CD107280955B975D42B3DEC
C7D095511FA8075DCE0F1959D3873ADDB924530AF72F7A4831ACF681BB7C42AB
16F30C00C28A2D1E3ADF882042E4FCE56C7D9AA15C339DEDBA8BF96F5B965079
1F14AFEBD609260CE1C0D6736851756DFD286A74791A8F4EDB8DD0AC194D66DC
CEB42F522FC06D22FC2511059DEFE7AC721142289923B996D528A1286C290618
78D62EA55904D1D2C54CCB438D4B0CA8BD14E6E1B82614FA1BA1C1350192A4C8
7309154E4B9F87B78A06456F4183D08A80E3C4DB458FC678556714DC32D1DACC
0FA4D890B67ADE7E8BC7D02A5BB28251DFA6763375E4A4854EDF5DE9B658CDA3
240C98A216676132D020E394D87F58C983AA6B8A176E717B088EE9DE05978BB1
84DE1EC354722827FBC24AEFC548A87443FB25CC42BC245EE563206C48B4A4E5
92C8C1595FEF5595F673F1D7A89694A80E1263036373D4DA58F41A51E2ED4512
4930944A040C3F8E8CB76421CE0FBA4D570662A4F283000A7795D905AD0B13BA
98EE28D7A72558746EBDB3DAD0D17267E74096550C8F1E8F66FF009BBFF33DCF
1124A4E07927E1A6BAA58CE3BAAC38374CFEE5A0F8E96A3C0EFD5B4CCA825DCC
6DC5DBAFDCE0CFAF111B909FCBC47A6C41EBD671CD980B2EDB9B4584D8AE5FB9
7AAAA146566C6F4C7B005E812C12EC2B15296FFC9B12EA6ECDA473786A461249
E88BDCD400D90CE063254EB663FFC4E8D1F0C184F29FF1E8DB6A13079EA46D9F
26A3C03C04EC0D136C3541D3EDA5E2796371AB7872BA233BE6D1CFAB1339626F
BED3BEBF9EC773D594446946DCF4315A24CD4ABD2941B3FC73BD37002CB859E6
2F05D18779024728F4C8455295B367331B05EFAD279513F27359447463D7FFAE
615AF650FA086C07021192844346324BFFAC4376217D8413BC2134F4DFC7123C
F581D3013373BC4ADE237DB52EBA5AAB90575FA6D5C1EBA23A4B9BA7034273E6
34FF980DFD32E53B9A97A998EE9F67152288DD1713F4857EB25406E7BC10B838
6BE0A2E3BCE8D66F12D60F54BBD4D1CA74241EF3399FD76F7EC0FFB0C6E8DA5D
77091D1C80EF7DD36453956C8050E548C93B3E88E2DF7D41FBB12CFF132CB1E0
3C71D1D522F9F8924DA0866BFC9AA52D107ED2829CB1FF5A9055C76EF4EDEF04
2E77E36444E0BED0EEFE60E9E99F280330985DC1B63FEBA8E6B759AD2329F6A7
1624DEF7C436ABEDF9B2A9710C234EBA25CA4B88FD4E94A08C11B21989111453
1E558EE42DB55C0BF2D0966317BC5CF7A376A22594F91AED1F667C2B328A6919
EC67AB291B1FA5FD6DA13D39845DF6080FE854EBA6E70C9483A48179357A8CB5
C6E64626DD7724B728791BDAF753F8804C4CDB13ADC3FDF9BD64B12EDE5227E8
BFCF0E009CC38FCBE9E0C4A51422279D03836ABC2F328E766A3CDA77252F840B
C8FA3E02D9B5857E98551A45725808253C39BBFD8C190506F7C0B8A2CE87A377
ADBF202718778C15209550DDD0BA886AB7A0DEAA187F322B0CF70D02F16CAE4A
B5C75A3546B733C6119F8DA940AD6FC8CFBD55D8307126B35487987F6BC78DB1
2A029A631E1C5AB1496CEA298FDEA96D12F320F38605AA0960FA167BC6EF4AA6
E3633FE5DE9761A9030AD6F4722B01DAA3315D465C671571BD5DD0BC9F451DB0
68AE9624A51C565D27018A4A02683B2F4B1D85ADFADCFF523F04DB3A45BA7A63
B8786523EA4C8F2709FE26AA89C23D1CC052C636987F2ED819717B389C10B2E2
5885DD046B54266456E2A97A3D3BA42CD3A38BDE1A4B71AE3761182640F4B106
54375340EFBFDA50E543A7616D639D1CFD9E8C4A77C773CF4406AC46CED1D8BE
862131525DA6F6E1FF3AF1D7718776001CB298F28C4380BB9F5EEDDACDB13499
3B469DC04F715A11ACF24DBB1EAB37B246A92045075D25B39CF3E57DED3D79AA
362E40524F69A5AE7236FDEE7E0C0663CF28B6F968035386A9DB7FCCC63CA194
0A32ED47BF9B27C46A9C333E885130C08758ED61D2764D7E60BBF062B2D250D3
3572D6E29FEFE49DEDBEB941EF4E5DD8C92695818BA4AA8089A33C8A3D895CC5
C5D622B6FFCC61B20840AE134966649656D452BAC02C913EBD426BF41D8D9B70
6F865C277E1F4F62564840C39A8840DFDC1CA8DC09BA6E47D526492388466403
AA3325B4ADA94F32956B55ED16EF71B873A7B7B55DB7CE3F7FF9BC25C4F8ACC9
60EF023409AAFB5E9E96A1778C19B52FE0A2DBC9168B4192782402D4F74872CC
9B135E454CDEE99BF3CBAC17C43B6BAC924A863514F04E52FCD8185603616394
01472E295763BB8967C4E3BA947816AF94ABDC05D42B1D6A2AC06470C19CCF6D
0AAFBA28A01BE2B4CEE83D51A2B42B8EBD3D14B1D13801EE3D911C0C0FF924F5
BA31B0DC1D3E3A51A932C563C63F45DFB95FE79F26ABEB87C9D1C26D11BEF752
B3F0F5D20025D0A35039B4FD8CB672599E9536030972406C61128FA44917315E
C45DE80E189C6C2A1BE3F81C3E8A1DE5913E95F995B37597562169489D2E3055
B03B78D9018CF3848AFDB1CA9BBC4B0B35A9F9CD01B18A4CDD4ED921463C0ABF
35CF3E9BFBDD68879E99CA7EEF15582F9B5C50478344050B8724F2DCED45165D
6F3F05456DBBC74F7AA5ADA20796D9565E731AEB4CFED3F640ED5626877F9170
337F7104707E80A9F1F5728014DA94106C4B4072DFE0EF5CF13BAFD1EB64B054
91AA878A9AA02158D6DC04B709F9BFA24AEEEBE0A79FD084C4139B0111BF8825
C722F2A0FC1914BA37180C7EC8F93B8941ACE1E39B7D3C2803BDAD1F604CA045
05A8380CA76DDF52A285DEEB29520AD316F1A1133591453E37266199AF86BC23
C16BEC9871DA1A68C457B099FBE73DB21FAD6BB6F296D66B62E8D242430C9502
61430DBFC4826226BFC67A77679B0734AA171F85ACB7ECB13FE261D359D7B302
0C65DBF67558B0F17DC6B26E77973C8C383C59603F534C84DBA6580E7553EBDC
AFBD3F5A31C9B357392FDEA95A0919F96124F89024CAAD9DF078A79C9CE07833
CBF073E3CBFB799768AFB2CA0D49CEA4810E620138459CA49F9B0AC2DC7E692F
FA8CAF0E716ABE9D78F6F4467ABD97
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: URWPalladioL-Bold
%!PS-AdobeFont-1.0: URWPalladioL-Bold 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (URW Palladio L Bold) readonly def
/FamilyName (URW Palladio L) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /URWPalladioL-Bold def
/PaintType 0 def
/WMode 0 def
/FontBBox {-152 -301 1000 935} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AA45ACB42B05EEB99F8B643CE3
F4B6449ED5A733594F70CCCD7BDB073E630C93A502476CEBA5741BEEE5938FCE
3E77996A2C56EBAE52B2701DEBC95E363E995ACEEDFD1CF8EDC72768951885B9
84F82225B3BB8E9522E784197B8AF13D70B2CD113F7501CD9333EB9A28CD9D56
824E9A3A689741D4577777676015723D17033D2815122B32062451E15DD271BA
6831FBB953F03DB40513901CE59ACCFD6C2D6F05E2B6C8AAC7EE97D4C56B8F52
BCADC9DC83D5C7C45F5C6E60DF9F9471D42B1D6F45EF98EBE41997BEF7D56981
8F9AE898AFA16089A91654ADB0AE2631539262C43BC5206D6CB73867B19EDFF9
024F9C3C7D790946F34742A688BFD183A1307649A36F782DAEAA2D8E581C911C
B42485441FCE5FFBF911F1D9988FC5C601D09514633B415378648CA65F2D6F40
F7CC23901787522154CC33941615849C4E5F2600BE11CE10B78AE007EC0E5137
4C66EF207977C2C2CE5FD8E70A74DA9968C71790516F1489FB5A2585DF9F5E06
9552F391999992E23975398FA0F539A299EF090B9CA16E940104614A4FA8C6D3
495975F6ADCA90522557B3F02FACDAB68EBFFBB8579876F09895D723E482DDF4
FDAE645CD275F3A8DE44AAD1D4C2987B6CD35FBB18312851D858E2F382FC606E
41B7B9393EA57A7FB9903CE835BF1F8E67C15EC8AF980D14FAB1A56EF1A62E14
5433A36160111440DE43D4C8F28013504ABFA5BE40DFA52D34AF251629A70368
73B22EC87849070CC52FE3B74D259E603996AAF50D77304A8B6631C652E482D4
C36A5EA242B3F6A979331BB593EDF29F2D9DC6B35BB39A5876E5378E71CF09BD
151E4B759D53762BB109DE5D452919DE87197C14A816E6970C6476C8A4F1BE28
E6FBCDD677D4379E9D96A978EDA97A0F256534A641017C46F0637A6886CF10E1
EBD75689D3CAD47F1ED6096F825036BFE59A50A550F0FCC978EFE560113A6231
60AE7DFF1BEB6846A97F44BA6196DFF0E9AAAB0F3F34EA25A98ABC50DE2C1812
47CD8A7E2F2BFB159544B845133FCD3B9F46D1C48462A806E9E614D5EB37B65F
BDE52075686731382196CAC3AE3161EBF89944F88A19A5CDCCA280C5A47CEDDE
B826B08AC1581B76BE95036D3797DF9D68406C79A4B51ADF64776AE9BCAA6D51
1362E7A00FDF2C9A6D40F64DDA4B706FAB728B6F6FA9302B4455661480719E97
CFB7A10536081E4E417984862DAD762591F1E352EB919871CFB5ABA6647F9C52
A9177DF0A2C22BF2F77E5E771BE54B09E2D6EB78092B3F91CF634CB938677998
C8EADA678CE13E315FC78666A5E37666C66EA08990CB5F15D022A8472FA6AE0F
E86DF13E7C83439A1E79C678CF7C554C01361759D961ACC52E50F44E54C91348
4517D7C558C8EACF15B83C7F0DD201D74FDF7F448889F2CC1668F234983ACB1A
35E9C925F08060154641171E00413B5CC753581597B69E752603992965170D29
45846907B11A2A76D8695FC766529FDF04B414323D127996D730F9FE2F3B9316
FC41775DF4F288C71B517502668B23E421A9436CCB8D7C80BAB081E9C62A6615
18E5FC8203F851BF811AAE848B8F7F77D5075DEC40E64B4E57F282A1DE2049B1
63A4288A69ED6EDE22AEA3E5D53B54A745A9133775B32A3A07ED163F50EDA6B8
DCE9C44E878CF5E2C2A3338A127C73EEF13C8D63839F2C2FB22529A38153E830
445FFF661BCCCA76785896921AE83116CA0E4E86E810471D7AA69FE08302344E
9B963D846A3BEB6C1CBA7BBAD21342AAC9D253615960AC334A5E3CCB2F8DCA63
0494BBFED0BA28567904281829F30C7154220A64C0A6B89BFED476AEEC02EC5C
C7560001713655F54E759FC4ECAFC7C0DA773CCB30E35D159521D62592627B25
4FA159335DFF39FEF2651A6FF898C29998A99E4CE824A072AAF76AA9B749F802
FECA58D6E39A107ECE8A3EBE7E645FC1DB012374B67D02E99FBA47C206FAB3AE
433B5CA205629157F082AE2BDE83E736F2993D8C048393BD80B65857C51F4C96
9C464C1CB1712283C42A77AE7874BA27B0AE31FE4A67F8F65D579A7115EEE9EA
10B3EB5A68C93285487121FB3EBFE72A4B9268E1F3D065E8BD972FF8B6226920
324F65176B760B692E3896BCA6B0CC7FCC0D05E6118D5435576BC9871384F13C
DA0B640DF1B3DA27604A975C2DB6FC1854457C67C54DC08DB0476C753826C5EB
56EC4F80A76BBF5EA6DDAA468091473A6531EF4F23468F57D052B226A961A088
A49FDCAC1C4D770CFE91A1F649D760C132FD77024F7A08EB3FB56440DF99E6DC
49E4D01F9286E11085D68EB9AA8A150F12EEBF5F137AEAF15A3EEB91741098C5
E34FA594F8E751237CB42E5C894C98A1FF2E6B0DB9CFBDCF3B6D89B5E598CEFE
581529073A5E8853C5548430B247CD9CBB403670A11457E550B1E5EB5E4E0681
8EA64276D900EE843BD07D2209AA7B1D13D190FAC0E9DDBBA646816DD1E6EAF6
999E13D836C7B0C5711612044111D831971C4BA33E9FD206A7B97E69443C912D
1F05A2B5F750ED1A437DF6480BC21F9903195EA8491AF90C7A388469A4AFE99F
2BE5CCE86EF8B6EFE160783C098E584A4CA5B0B05E41B0A13E45FB3B8132D4FE
46BAA83D19E3A7728BD5EC5A36328C6999E9038C851C24E2B2C31D6AF56D345E
1393D72437A6AA00289703DCA63BD3C430EB63038B0E133E13C5903578B53B40
687968F0905E6B9C11FA6BBC051E62C372CB29F1717CA002A519241C9C0AB046
C6C2D674888BD4486399211287336B4A4B7A6081885CBE6E76637271673DA481
58E778B11BCB32A59E8425BE3A256AD794E77611A5A8DF9BAFDA5C1129D021A5
E90A197611923C07007FDCC1895EC40754417E393B7DB28736EE75116CA98589
E3AB1D42EAE1A775AFFBA5CEF137CAB297762FB5C45277393235C450451C550E
E09350659E50B557045B2EB87EFEA0F0830E3017168280A238349B82BD0EFB82
FA41790431CA16082699B8553A4A20BA741F9A9E0FDDD9189DE5C3F2A05C77BB
7A40B8CF5EAFC476AB031A8485DA7CB345F9EE10B69128F2881E4C77381AE42D
708DF8E5C93474AFDFF44FE490FA6577D5C87A08B6F333E1C2EEABC20A07088D
AA0220D6BD1C2CA79CAD7F8FAF1B51606CAC830C1AC7F8460F09EA1C8257F3C3
A603D54B672F4AE01822A96CCED138759EFAC526C51614CCC4AB6473EB7090EE
576202FD040080F9A884DA5501D8B00713629B06EE09129AF7A888FC9468887C
282A853BFED99EB4AF26ACBB6E39C1A9F1A8DB85F075BC3E33FD3778024A3CBA
1D7A2634342B5C54D1742E3F5655592B7CF1C4482AE90D4E5AA5D884A2543CFF
F1CCB7721CFE82F5DEF46CB70B27896F7121195231E5F223F3351A3432EC6C07
2AC073C20069326DED1DDF9DF4D7158F14ACE0E5FD3F293E30DE5D1EA9136D65
2E3AE5F0FDA52B0C41AD5953D1F554076EA921794DEDA5DE9E30DB2B6E65E0F1
304C3326710040E77E8F1A114432E0BDFABFD6926CDC1F9071B0C0E0EEB028EE
A49181D8B7A384A09170D9DE5F61E1FFA0ACDE9EF863F7BE6E929B2825E7C7C9
9845E58D8E510FEC2C6007EDD972B07CB644B4E1CA766F19FDDAD7999D4C6F93
A337BD182780389CA09F38B773F2A3EC4464CCF5DF3F8C21D9CC04E187BE53F8
FED4F33633BA03A041C3FA4C157F5B8C568B6005F5989022DC463B75392BAA66
E94AAFAEEEC73F2A5106CFD4EDE8ABC0A23B47CAED1DC2C4FA947F9D7FA8CFD3
A13D2D1BA728E3C49569BAFDBE642C963411707E41DA572B26015479C58B318A
672778A3BE351E581B538E3DC966C9B83E876DB4FDEF239E7CFFD239B90D36D3
723988EB36BC2E699A116F22A80455A563DAB2A2BA6F960B8B64B80569D97284
70C769A0454CFA20E3F918A2DFA3BF6B622CF6FABBA8456CFE953BAFBA926E34
A8F8C31EB3748155EC41CFE9353D2997C915B97408395B74443A68DDFB9B03AD
2AFFD51EE19692ED60A6AE0D746283944D7293D6FB9B3606706006C6C4B80B91
5CEF1404F59E4A59A727765DFCAA0C440A6FDC9D19E8674189E7CB9E9F0A8CD5
EEE5FA8ABE1CFB0A9DE4584B8BE5B4082321505CB0CEE9FBB6C97B85C3EAF9CA
3736BD5C167D98148883F85FEED15A72FA02095D3A9FBD93C7572791CC502C42
92F57D5894B4B728A69B785B155F22EA298318E7D9C2A67235BA27D7FDBAEC3E
AE31DDA10917A5B66781698E95608A4778E9A55B141E2AE390781B707CD4944E
9A344847B362460A7059DD8A2581B1CA733685AB4A85608BEBD6450CAB759491
DE39A39CA102A84A6D92422ACACF8DB01859988C89D77A460188AFDE1C8BDA4B
DAD9806C76AEB87BAD6B6DF3929F5149BCEB2466249D92D95AA1503F6CD25B5C
822A24D30FE2F53EF95252B3DACC2D656EA6E75105D1C9B85AD14C495B543FF4
C58BF1775D61115E8050CB347FB9BB690B3F1F8D5D122A2FEEFBE028E8AFA4C0
07E502330801D2E89DEC0A17120B387F0F2063E54C11958BF2E169C26EE6B271
079AAFB950AF46DBB9857D72352A50FBFAC0F382521EC929EF0D5F65880B2B49
514ADE43742104298D1C707A5A5A44FA471FE51C82FCCB372F45F861AE83A6A3
5C103A415CBB5A8C5FB2DDAED575F353BCDE4EE1C52A29C6D3CEBD747AFF17A6
AFF908C79C76C1CF1978F8FCF81B325B2AE34622C9DF93BD5BB186F6E9A1CAB1
83E05EF9F3644BF2530CB119078ABB9148E9FFCAA2C6A2BD03A17B76FAAE9CB0
493E6294A0A11EA53D617553D5C57CB1722553E997ABE85A338B8FF6B0D1B131
0C75AC850FB4C642FA3710C2C9905F2686D55DFE985951304701D12D3A66EE38
027BF5090F197084EB868C4987222A5CF0756E45F7BEB06A491578CB5FBB6121
8034C721F5EF704DABF60091C43F494B8E802A47C2278F2BD50DE2A806B0D7FA
F7914B12D03302B8A797C9CCD0C24ECBFD1458AD7022F1A838735838A7FE0802
5B5CA3639451BFACB4AC69B3D1DF39DCD0C86F718C6C635A02048DEB6A82E532
14F4F1BAB54EE46C97533DE11EEE3B9FE2203DC6C75B2B5F255230D00D4C62F1
885A3465B64BBEB2771D9E828DDF692066C49523AB41242F1D916ED69D1B7FB6
E5B386691E82F38F10ACD33817D7BAEB7B955CAB88617EFAF030A10ABB310B4D
67130AE7053A2C227BF14F672AB021E1FE2A443AC56DAFE0CA144AB9E02C2176
9067FC2D028D1969F2D9369CAD8E757BA5312E51983F99F07B7E0E31F556E2E0
19FABA5360B9827E6EC7D2F12A37C14EF4FE416F8FB3B918C454BD5774AAFB25
90E256C66377776EBAB2E91AF0BAA75B8E9F4441F44A25F90C1CDDF679DEDA69
1E30773C286B1BA80CF19503C99D48E34D0C2E929AEF3C8034A681E5C185DB2E
6090B1493B96AD2955DD8B1A35CF423DD8F3BECD441A5E7F485BA412E79C0890
8A0030F94AEB435C0C0C42BB0FF97C0BA99576BCE99708E6AEA277BCB8C31065
CC4536807079C5C52B2FB301628AAE6F318BA2C364A97378970F1B4823EAB1A0
1C9D57853580E6F180343DA29EB6D49312C4EC7096775B2DF1F871924C61BA56
C4E8267CD8D051D98627F8990E9BD56E8C4FDF7A4B67FFA7BF98C5632B31D9D0
5EF146560E5E5D2F0FDDD1B7C17DDD10E2B4D7720A431D8C14A82EF3CA876200
D5843773645F1DC1528211975345B1E8E7610561510D62F881B2D7B03831487C
7E0DD5F23035C537BEC42225AD1539102098A66B65BDC6263682315E5A1283DB
C39505395BC6E9DC477FE597DC900273112D1EF6D66F0B3E3D76BEA43DFE940D
C2D3834F74A031B9D8F26FA9D8D4BC3DCE736A9B33BACD2AF4D5DE63A50C20CD
C134759F7B7902577D72CD009B60670C2982090027EF098F3BC4D08339451AEB
EF20A710CFB74AC55BE18CF3B7353F66E92E2FC3C8BA7C178F70E45FD5504D8C
E368D647E085FB97218A2530CA327792033961949E76673EC0A274A2FEC7FBEA
11F132AA34D4C562EC8AE56DD0ED85F8DEC0BEEF880198C15E1DDEBE00DB4CA7
1367A3547C70F2D1BEF5D7E42578DC39AB7CAF632E333F98F57EEF40E66F956E
98933A8C0E3DBB1D027D1E23F0E139BA03B56B4F220560CE72BB55B8C0077B77
C66AB67C7BB260937BC426C835D610D7A203D903D15D6FA8B9F4BC91A9DFC03C
3F55166FC377E829EB5FF66A4C3D4FCA898BAA2CFAD867906F9DEE56903E2328
CE42FB1C2D98511AC43F3A71CB424C72AF75C1818F6A1D374C8BB3B65AFFBD62
E1EBC63C182EFEB487A03399B058761FA3BCF65F7C1BDAFF8F1CB40CDD078B2B
3129F15DE6191694A19FCD8E55063239A22723DA0ADC91D3BC69DD09B80F5F85
76B477970D94FD85B3A7455B4BA4261FD525D70571F948225DE8A566CD611F99
9BA08C604EAD5C15AF3E1BD133241D58DDCC67037061D45335253399904DCA76
40B13B0C57532648A5E341E6E376A63E89A86988E630CF29B9B0C82CB348259E
DD482520A84965A03F7D292335BF6663088E4A13FF65FB1A4A5E6C8CFC9D64FF
72940BA3ECFA1C2AD0E4174917B2684EF827C03541D8D2620D6033A76DBC83BC
F17DFC2CB1112F643E2424099492C4F071336D985C0C360B2F5A5877FD00B6FA
EF8615119754DAEB4C88C6F6D2CA046B557000AEE5E7EEBBC70968AEFB7F45C8
502E8D315A417268C534622600C63519E9E7FDBFE860AF59FDFF6B22DE1E9A54
0A2961683B841750023D97364E0A5C56B3D627839607F128F621463056557E0C
D2DAF71D9E321AC37679E0203FB47E15B671D342FB45517EA6176BA0ABE08826
C6238E57B1DA460E6CF52D35817CA9D429942C09C2C72A495153F668E390ECA6
8465952FA363B0F86922C552B99659C17828C5F7A37139F1E81AF4B04E836941
EFCF6AB4C42B03DD83C88EAD17DAA2CED6455A0FBDF08C1356CE769733A799C6
8DD7459A21336079126C17261F201B5741C28210066F81229CE2F044729C66D7
90E9E9BAFE9E1DABD433B2405D8C11BEACC5DCE371CE0F825A65B22E68289C05
F36BF64173AA1D106CD4BD1C0DB79FFBD30BC895C876528381C4E322949AE903
37449F9C55DC86637A16AB6B8B148DCA86642048F2BB4DCFF0E1BF468D27DEE3
2856F1D972AFABF04478516C42AF46BBEBC7271938C938C1995E07B3C24E75C1
42A970F63BC1014A091DC952E05D7F41812A143B802D3951B6D9026B5D97D330
27BB8540EEC4A0102A61086064FB56D54FC54129B7DF0DBAD6E7039496001496
9BD78FD57BCFE092F16FC59B70F6C8C1FFE5AAAEBAF74FF120E81A80675AC114
5F0E610F0EE4A0462A034CC5D3CECB1BDDB89A943D161683C3F4D34A87ACFEB0
9C703E95BCB528BB93E22F4C22960D71968AD9EFC863E25714EF4681A95323AF
31A481E0AF33B1E638103216AE8054EF6DE04BADBC0A51A2040171032B5ED067
B7A71712ADA0689460A8FEB280F5F0BCFA595B6D553E69CF1C73ADBDFF933FA1
ED64F14F6AC19CF4BB1C3F176142CAF00266A50CB3CDD40500DD3014D53E3271
9381936CB0776F385BED5199C717C8C05CC48AD62E125FC003D7BFAF8972C33B
CE44A458C5F5EF1602C01D3283CB3A42873134480615781F4BD3B054843D4BB1
DDA2AD8EAE284135608DB3F38E12C07BD0F3E3940EC607E618B3E5E929B2837E
6B54D8D996A9C156F99318004EC02D5CD155CA55B9173417A3F41A52AD8A869A
1A25AF1AAFCB202750E9B9A4BD89D50D48DAEEF9CBD343B8D23017AF0E768DEF
B21A9773A5C347BC61FC9D9631CC389ABE6AB60356E0B91284340870DF4239E2
A7CEBB59A0EAC6DBC80EF7920A8454FE071FEA0094A55ED1DC41027412133299
80CFCFB1C4D20140D58D121ACBB82B0DDE8AD3311C3921A22163B17E9ED24EAB
A8B99C4233801704DCF581720F94B01D5917BB5287901812F8D54507755F3341
76C1E9D9461634B78DBC70A30F2AFC5A3196BFF0ED77A7847F7CF7B8D4BE8687
DA4FB60533FB741825F190AE74B9E1F3FC711841E99F2D426A73BD08F7BDFFEE
BF4D5A8FC585026273B3858F326697965CF752785AD2ABE2627EFE2C9B083F92
31F0DF877322728215169F75F267255C100265D82C9C18738176CBC99EBC3A3D
377322FC1998554743B0218331CA2E0C1A7E381FFF4DCA857E9EA7F6110F8CD1
0758E6FB302F584B111726AE0B5F54E7FDFEC6A35BB9A49DC880FAAAF8C23C46
998875138B5FAD8BB1530248EBF03149648CD47CE236BB720EEE622F4D0B4AD4
AC6FC351ED1DB7CACEEC3CACED14896DD30DF768A50B61AC20FDA27ED92A91D8
00F4752268D4310DA41388A27DA78799274A748EF975BEE5E23F4F0752F66C05
7D7E0100A72169645D000221F815296DBF751496D3AFAA4A99A7A8B9DD45E541
A40012327B84EC358FA2FA8082B95DD8EF23579D090C09BC250025549830009F
5B53F9494EA1BAE5B960F49F94483AA20F8FE09FEF5A61493839BC24F30B30CB
F4EE8C1229573F1F2EED2C3ED5D4D990661AD31B99FD11FFBCD15AB057EB1D2D
DABFD9997F399B56068D8BA1D404EBDF64DBE5620D2EF497E6808DD4E7805B0C
CAE0A0CE643D5D00225EAF9E73262A86B5C8E246547C9B492CF616FB848744C9
6774E95198CC24A07F228715BB530EB7892167CB0308D8338855F441124AC699
670A5DDADF2097B50CEADB94ED3498CD1459F0FFC750B9BEA18D947C7AE5FEB8
9311C8D330F0AD6E39865395536828DA89CD92C48B4FA50EF1BEBA5095045ABA
7952457E62E4081D5F36AA9A52BDD7D1ED800D9835E648AB102FA1E7C7F23B8F
0BEB6DDDDD1D9F41AAA88EE6187F389430BC55C5AE42B7888DB9FE17FC63CFE4
EA688122CD8EEF14B427BAEE583A9D84E8578207A8F05175C4C7852D859BC608
8CCED18C2B12E0098F0D455C6A9DB48282DE98079E6E3B738EED2374363A5D95
478CEE94D0DB7633F313D8FCDECD98D2CD698E260D9B479D4465B6BAAA09F7D4
A97679A073C8E9C19179DAE058F5290B607D9064F1EF3180FA3570ABC7AD17E9
799891912812691A88A4FB390886B1CC0253731745B403496CB5D8D2BA0F0F04
70DAC16CCEFB2AC26E702C2EBD1D08B140EC029E3737F188D5868E4FA1C4CDE6
02E9075C5E509F222AFFAF182908B5CC7DED1E94A5DB27DEBEF0B0C827C8E1DA
46B0361BE976C90338C9D74A66E36ED8571D84C8D508273AC905829B7E9D6F9D
228E05859AE490A7ED502CF1E10A353C0C700392E420440FF7E2BD9654663FAE
348E3A5B55012B48BE9E86E435FED8BFDB27007901786E948073F4086B4FB7C9
8DE9FE8F04DAD394CB6AF325C4514F03BF771CEDC1ECC1EED84F96E10C9487F0
D317E2E8A8873672CA10613A38806DAAF3E5F1EC2E233753CC41513DE2F22AE6
8E0FFC19AB8B1155D82D3BBAD28F35CE0887A685975A7A9F515ACAB05F0A55A2
F3820F5CFB42E9A61B3DC40981368A98048A67E9997EAB49630C49E13321C845
9E16D23D7D5E9108F029E68711CF721B1997F1F507FEC112903FA7F5C8CEC295
037B065E7B03D29BFA77876957BB8D4688F6B7D37FCDC5BFFCC5CE9CF87A020B
7C98115D54C79003F76EF7FF5542CE8F9FD4D1665997F62FAC2F2E1F29EFAB78
6F4DD1AFFB5BB56047C795E0A3DD971DD575C00FECAEA7FE970E57168011C5B8
3FE88A4C5830E72944900287E2589B2F7C6912FF632ED5F6883F81E93196949F
8FE9C26D848312F42D5C22A3CB3F59C1311A1AF6715AFDBDAC2B96FA506A69E1
3FDE7319BDCA861E476DA3994ADE9E169FE49F2AF8AC18F1EFD1EBF0D342F110
DE89FBC80E1ED6E25A87B5CAC6C7FDE908CCAC5AEEEC78934B5E349B8D3FFDA1
8FEF2A44D508C9E9A3C2D99CCC765B73B9188CFACA08E2A77608290B075203B2
AB3258B38C0ABB0B239517520D16F84AEE4FC5AF6C720D88697DE2578E80DB1B
ACE65B04686D052272C97CBE03C44D9834C41C4992B14CA7B8F884CF0B65E50A
B3E501CB5D76479F9E423553C2057392837248E0B9321CAAD83CC8A0D29D9BEC
8A8F9033FF2942402FAAA4B0CE6C24A17D3F6B9133B8050C1434241EDB333D1D
CB862DC543CE420F5E4B362FF7408933501D25922724867F1084DDAF1D0E0A43
6378E81CF88EF1B4ABF193F6F0F901537ABE3F175A360128E6EA1FBF971CCAE4
F84C16417C62E5891606633274B932EA37986750ABB935836BF804BC54D97E22
860E1B4E4DB9520C5179B62502A6AC0139D5F6660FA57AB8165C38AA49D69F2E
0D329684551C9012158313AA8B7401BE51E7B3C0453409A7BE6F53829103F9CA
4A898875D068F646C9AC457A5099FA95167ACFED3C707D5F8E244FCA274C572F
FEC24BA30EF9DB07054965BD220746B981E30CD562DB316843A053F82CD8E6D7
EAD84B483EBAFDE53B3B31226325A27C50FC50685C434D4EF1B7D7FC4C7D441A
A62D48801769531ED7EFB3C438EFB1B46CC113DD58D02216A81D710442253365
225052ECAC83E8444CE7027A94C38151126508246F801EF93C280ED6653D1A34
1AF31E0DD72AA1D6735F23ED2BF63A091BDA8B6835CFEC16B343082BEB07C2C0
F1210550193785E16705526E18C29421DB4FEFD57CD2B0B7721EAF2B21AC168B
46CE7FA79049B46B4EA196068CCE29BDE02F74CCADCE6F63F51819C4206CB45D
52E88EB1C042E28A6DFDC45E8F0D577DF22473C89EDB9F444EA9DA277A0ABCD9
72A0E4C8B419499D3F6B356E3548C00DAB9B0BAFFAC7FAA0C5381575900CC6F0
6936C89A0CA3F1783DC42D770403A697FDD95DEF8B2D573EFC2CBFB7C4F51848
BFE0BC9684E93D19A5833FA589993F6D8F839808711285E8828E9A205D3C7159
A63851DFF56094875FB1003C099CC88E030F577C091CE0F82D95D2AB8451DB68
3159A3936662EDE128761D164A9843955BBFEC7213307B78378886F69020F054
4340C3B4C147A3CA6B939B4B19E81AB177C4C51CC2CF1FB9573924D8613BE48C
C4826515D023173E2E12BBEEF13F0EA2444B154323E8F7B43A98AE32FA8B87B3
B8DF640A796F4BE9068BE20BDE45E6C67C0B53E1269796032ABD4C90337D6809
85AB4C18FB39B1F03D11DD9DDC306C60835972912D1C8B91E37BFBA6D07346C1
CF192BBFF74C518C7288FDEA2588AF81E4B2E3C0DA95E6E9F1316BFAADBA9135
D64A7DDEC789195D75655CA84D618D36D444BDCCB32D59A8A6F6FBB572AA677E
413F1165B97406475CF51F32E0F85CFCD9309AD1AB27AEFF1F1FA4FF439000BE
B0183F951992BEA63C6B1D4C9AED4E13EEAB4A476BF7B5EFEB67FEDD00215CBD
D2B5D54D154DADDA9950D6009AEEBFA69661BAD996D6E8D78666DBF47F7C7DBF
8E8314FD02740D8F4B5AB4769D33FD660B17F32BF5D5AF3CCA4A47F78B4368FC
5B9567CA5876B779475DF68920F678B5C4584A1EAB39443FB4126192FE536FC8
D4CAFDAC1250C88230C1ABA34B4408C32592BAB68D3C77E2B117E7D3C26BEE1B
2BAB189AF46FDA4F46E1AE503F90213BFF2DB659ADD1E9993E2508AD48902A8B
4BC1F48BA7137FECA0E57C7BDCB701639BCA947ED76E683FF2D5B1F79DBE83B6
B7836E42C2E1AE0093867B0F2D14563FF9BCC0B4C20EADE38DD8AA492934045E
4EC21404B2E1B8F18CC386797D2A9A40DD7EFA8609D2E3094E30F5018DA05556
BFF71ECC844B2B718598F0825CD9731341C494C795ECF17CAA969792C8628B68
09C79D5834CE55D90C8CCAC8BFACFCF0E923F2EF64841BC9B7B266B3721B91E3
B18B10A96E8ABB5CFD28CA18CD9013BD4AD28E7284386F6082C2362E4CCF3E66
ECC33C744627696B6090245BE7A3DC5CB4A60C72B62704A385C8736544E98947
D72FDA940CA8D2B4F7F044F21E58E6CCBC6459D0A6BF31CCD8C5A949FBB5DB58
0EDA64442DA362619271FAF3E894652422B11A329BF92DF3AFB2D3F8F64414A8
1ED8CB928BA33D61D0F17C1E7D2A1403C4ACB7DAD4226E97F0D816D95BDA0BD9
9EC4932E1CB09843818D557BDFD7561D55C9E03EBB587B340A358A65ADDBE9E9
0018033DFCDD9145F8BE5CFC2D5864EEDB8AF0E5CF8B44A8C9420A7F114756E5
4FAAFA7A308B95E6FD08B08B7870E8976867475731BFCBF77993B27F23C4B9C0
085421DFB3E0E96C71479FE3A4A5CCD867E5357A9C218E218D4190CBD4FC175B
E286F1F04A3E1F83CC9140BA35F54542DFC4B11F89A33FAA0EBEC92FEB04C3A6
A0FE09FE1219DFBF1CF95ECE64E3EAF3F47EA8666A75B1C69B019325D84327CA
AD11A769127CD2D04893D0746AFB81B32F606454DD3107E2BFDFA2EBC7A3E2A7
8C8927F24C021F8A64E58E2A017557914059228B001141C08E8960EF7494E427
C5F589511814F43E9A8E57839D2B3618EDB60264A2148A2204BF025D7C70D0C3
5104C631D1EFD0526D78F2CAD37D9E52911D53498060990CE56619ADA1F358E0
75B4C8C204B79AA3BDBC5FEA35B3CEA62AA27DA04D2DC9F3EB1838B3E3E37097
799B5A18456B77CD97DDCF704455215B860BD0241DDAC2F0E04372E3722BA6B0
DB00F3AB9EE3EA5EBE66A8AF1A3A40999C3128862F1CB8EC8468C331D7ADFC2F
884EBE99DEA1D81FA8D800F1A68D5950BF577FA1489459939A977A9FD2E324E8
B75BAFA9673F5BB3CC348AC52F4E6FF39F72DE2440AB76209E2DDDFFA60953E6
18FF54607848247D66D8891E5DEC2B7C87192EFDA892E8AC1E9B51B0844362B0
652A6345C6EC83DFEFE099455232455A77E866886B8E0315F5236BE48B537F6D
DE0C535B22950F544FFF573016B657372252EE24C8A9AFFEE819C265C510568D
F3C15DB13D437C29234C4FE4FE35936585DCEDECF5FDDEFCABFB8A49B81F882C
73D2A384F97B5B0D1A55372F971BEEF4374939F90B014BC7F877F150049D4EAA
398A45F55B04AEEDFCD5F242C1CA9EEE966493088F88E2F17903FD6A4F532BDA
7584206171DECAC0D48A57D19F082F77D665B99993A80F0F2447A5BDB43908A1
5BDEC36A4CCDA0840BA4F90827BB5DC8E1BCB1393A659FA6B2FF94D030991481
FAD4482615237A321AF5D70941A99E5E09087A895B5868689C753718BC3A9622
59EC8F6B3D6B7FF9C07BAA74A4E992DE18545590B57997D6F5FB8DC88B2D3712
62AE486CDFCF0B855E9EFEB5E73027EE261CF425F58F638403F2734265C65EEB
B69204F9BA63D23B78DE9DFEF015E39A79A4DA67ED8DCA0CED418A6A8EFEF19C
4F0F42A0A5C05E6BDE047849284EAE2CBAEE2766FC88313BEF614F5E1B122E9D
3951A0D8902479CE58E291836D870ABFA7B611C39A6C65D0D9F759B7E80358D2
B3E62106A1349777B095A9D6CABBE40FDCFC759CEB5B5C30B3F85F1641F34837
7A602A2DE585A36369903D6D34BA0A31E55914059A134B16DF0729E1F15174DF
4AE9C94AB245F2E2D3A505B922F1E31174B331E55B331C3889A61FD11075AA04
9AA49D8C6A57AD8DF1BE727CCD39F0085E1A29A365FEF4083B75C000F0A5D460
85D4D3C5B665E9C2AC7B8A3915C3901DC70380B882589B390B0FB0E5C3F475F2
0F9E8AE659B869F77096CFCA5856229BA42A41F4FE7D2831D12091AF98A361EC
80CA8BEFBF9DE1AC135FE2A525E3404B2EF6072D6608177CEE1DB5A5C5FDB92F
1E1946C2F0C14AAF5EF465363680D61E32214D2C2A610AFECB06B1676BFA87E5
8662663464EBF69E0EC798D0A8CF0F0F50AB88EFA5025D439355826C36A0D5FE
D67A44B2B618A54CF541F1C1F9C9C48C7241C39BB8841837CAACE3B97E69D771
39C273BC7772029694F028C42E5602615ABAA18A8CF2F816A9CC4AE571C7C984
AF58F394644941B3EA0B7E42C3CC59600AC5CACC4F42768A1BBDEB38412F4784
FC84A9E6B68E3BC23A091E7DB1E6E9EEED7ABB4445E8389F755F5E60DBC71704
48A2CB95FCC328A02A6F83D1EE5E288BAB7ACCAEBE30FA72DABC27352BB8A07E
A9011D633BBBD2EF461E71B990B3BA157661A6E0E5090C74A971CE975A6224F7
A2B8774BA1D12952196B5A71189BD46B21F2B28669D76FAE1786519D600EBCAF
D93386D4FE7B997842002413B59E7BB99EBC75217287DD2E8DD2320C7A170646
690E72DB93BC2A1BD27085D7B7103C432EDAEC186200F8AD6797A74BD8C8E348
82004AA66BBA5C8E5B15E4C84AE6E32B58AB6B1C00BFF9985C579072997869C8
6F9F59D05E4E191EC9536CE1575F9FD4EA6464FD6EBE0B8B30CF2EB8B75CA8CE
62385E28B14C5D75ECF4A5566678C94A2820659067E466541749BC5D1FB84C96
08892364157122E280F8B1D6026DE9256EA9CBBECFF2257C0AC944DE1D499C79
454591477C40E33B2691A9D8394D8E94BA913751D054838E5C4A2FA3AE707007
3188A88B01A1823BF02D0A022BDB5FA2C3D2D2076A4C21BF23D058AD02BBE8A0
C634777F6919FC1973080FFF0476BBC0A89DC20AC08A93A4DAF068007AC640C6
5DABF5D926F7D7E6FC1F397BF36EA2E6800410F1567B781C475738BC3B4C1BBB
4D7213FED3D8C5F81A547BBA4CF7AE80B12AB73EB6BF0BF712F20D480F618ADE
3F2EE1E744AD9BB17980507F19312095E22ED89C0BF2DBFB36E7C036ABEF7DCA
15A7602FDDB9250693A83D64D41A80A97A2B2DAD63632D6EE6EBA41B5554CD02
030C979F710D76953C459E8F432D24EB96187926B432D0BEA0515F3AB075BB1A
B63EA7FD6F996711D74A2209AF799227BF7938A7AF7389A054D95D1AA5995A82
BE35F464160C191D76693FBCC056A3245F477BE8E818A5BE866B645C4A9F4DCE
71D548D10F813095C5B91657B9DEB6A459CE4CF869EC449F97E964411E053B77
AC801E46F1A3A745549A2C8D25A80B74E846386F7DD2B0503B9CB0F2085C1DB8
42AB7CE116DD640AAB59DAB4777A6D71793F406E972129158F5C506F238CAF51
FA5F0F2E6B45D0B3327DEC5B03F8A6DA9E946E2824C4168FFC4040CA156AA167
229EF965E95711B60201B7D5B19AA2AFB1E909FA398B119BA16E2874660C88BC
146CDBD703BED9BD2FE98D7A4E62C986790C233DA4965E7AE0DBA9771982EA2E
D4DEA8DB04047BEB78987394112F6C333C44590C1282C08250324171EF3926FA
87F7F8793DC7C4B4A7A2EEBB9016EC6ED0DE002E74BA03A2B1CD46D583F4A1B2
4DF0A74C5C0BCABC99CDADD278EC54C6AEAE0BE3A8520FAE0DCA8066A7C8547B
D65FB13111AFCC6DF9FE820010B03E0880486CA99D5F2E77E677731AEAD759F7
E6A754E3EA99ED9FE74BF623009ACDB7C0E8CDB8146E08A26CB7B9264819F8E6
6123D3A9E68DD8E13C0324857C92B74ED8EE4066C9DF8EE6E1DFBD1FE69B416C
783CB848FB48BCA15048EBD444C99CFB95039FB93693E866641CB4635C6A1771
970F178C7FD9A196D90B0F0133BF54024D1192D4EA4E7CBBBAE47DFC490FDB48
BBD172CCE6CD2B6069A031784F475F4F31BCA12D5A1EAA850A3F0294547320D7
BC4B0F41A6A6C5C53F9B3E96F59B9881054A5CB2E597FE3ED4E57DF581D93EFF
85FE663D66EF74EA91DC4D0B5C30FD6582E9FF17EB88B77F6FE9B1CA51B3FD82
21818E2EF2F2A68B8EC17010648A4A09F095F4BE
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 66308021 59992909 1000 600 600 (poster.dvi)
@start /Fa 139[30 39 36 2[50 3[51 1[26 3[44 56 40 5[30
1[30 3[91 37[45 2[23 46[{ TeXBase1Encoding ReEncodeFont }14
90.9091 /URWPalladioL-Roma rf /Fb 240[50 15[{}1 99.6264
/CMSY10 rf /Fc 135[66 93 2[40 66 47 1[73 73 73 106 33
66 1[33 73 73 40 66 73 66 73 66 9[113 1[86 1[80 2[80
6[33 3[80 86 2[86 1[73 60[73 2[{ TeXBase1Encoding ReEncodeFont }30
119.552 /NimbusSanL-Bold rf /Fd 138[88 48 80 56 2[88
88 128 40 2[40 88 1[48 80 88 80 14[88 96 104 8[40 5[104
13[80 1[80 1[80 49[{ TeXBase1Encoding ReEncodeFont }22
143.462 /NimbusSanL-Bold rf /Fe 134[55 51 83 1[60 32
42 39 1[60 54 58 88 29 55 1[29 58 55 33 48 61 44 1[50
12[61 52 5[94 2[33 34 6[61 19[25 1[25 44[{
 TeXBase1Encoding ReEncodeFont }29 99.6264 /URWPalladioL-Roma
rf /Ff 169[86 2[63 8[40 40 99 4[85 25[40 40 40[{
 TeXBase1Encoding ReEncodeFont }8 119.552 /URWPalladioL-Roma
rf /Fg 169[69 1[59 50 64 2[75 79 90 58 2[32 80 73 1[58
74 68 58 74 65[{ TeXBase1Encoding ReEncodeFont }16 95.6413
/URWPalladioL-Roma rf /Fh 136[172 115 126 69 92 80 126
126 115 126 1[69 2[69 2[80 103 1[92 1[103 13[126 149
1[126 3[126 4[172 71[{ TeXBase1Encoding ReEncodeFont }21
206.559 /URWPalladioL-Bold rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
% dvips-unknown
statusdict /setpageparams known { hsize vsize 0 1 statusdict begin {
setpageparams } stopped end } { true } ifelse { statusdict /setpage known
{ hsize vsize 1 statusdict begin { setpage } stopped pop end } if } if
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black -583 -694
a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -583 -694 a -583 -694 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -583 -694 a 0 TeXcolorgray
99 x @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 0.0 0.0 1008.93475 -912.57379 .5 Frame
 gsave false 1 0.0 0.0  gsave 0.4 0.4 1  setrgbcolor currentrgbcolor
grestore gsave 0.85 0.4 1  setrgbcolor currentrgbcolor grestore 300
0.1 0. false tx@GradientDict begin GradientFill end grestore gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 0 TeXcolorgray
0 TeXcolorgray 1658 113 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0. true 3.8 neg 60.4916 neg 469.2256 66.4916 .5
Frame  gsave 3.0 -45 PtoC Shadow 0.25  setgray gsave fill grestore
stroke grestore gsave 1  setgray gsave fill grestore stroke grestore
gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
0 TeXcolorgray 0 TeXcolorgray 0 0.5 0.35 TeXcolorrgb
1988 -151 a Fh(Perfect)52 b(Powers)h(in)e(Lucas)h(Sequences)2335
59 y(via)f(Galois)h(Representations)p 0 TeXcolorgray
0 0 1 TeXcolorrgb 2007 267 a Ff(J)6 b Fg(E)g(S)g(S)g(E)37
b Ff(S)6 b Fg(I)g(L)g(L)g(I)g(M)g(A)g(N)38 b Ff(\()6
b(C)g Fg(H)g(I)g(C)g(A)g(G)g(O)g Ff(\))35 b Fg(A)6 b(N)g(D)36
b Ff(I)6 b Fg(S)g(A)g(B)g(E)g(L)38 b Ff(V)6 b Fg(O)g(G)g(T)35
b Ff(\()6 b(H)g Fg(A)g(R)q(V)-5 b(A)6 b(R)g(D)g Ff(\))p
0 TeXcolorgray 0.6 0.3 0 TeXcolorrgb 2474 447 a Fe(Joint)26
b(Mathematical)f(Meetings,)51 b(Baltimor)n(e,)25 b(Maryland)p
0 TeXcolorgray -583 813 a
 currentpoint currentpoint translate 0.75383 0.75383 scale neg exch
neg exch translate
 -583 813 a 0 TeXcolorgray -319
-669 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0. true 12.8 neg 17.91713 neg 304.19392 23.91714
.5 Frame  gsave 3.0 -45 PtoC Shadow 0.25  setgray gsave fill grestore
stroke grestore gsave 1  setgray gsave fill grestore stroke grestore
gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 0 TeXcolorgray
0 TeXcolorgray 13 x Fd(1)p 1 0 0 TeXcolorrgb 103 w(Intr)m(oduction)p
-136 -632 834 6 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
-319 -85 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0. true 12.8 neg 26.61932 neg 304.19392 32.61932
.5 Frame  gsave 3.0 -45 PtoC Shadow 0.25  setgray gsave fill grestore
stroke grestore gsave 1  setgray gsave fill grestore stroke grestore
gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 0 TeXcolorgray
0 TeXcolorgray 0 0 1 TeXcolorrgb -78 x Fc(What)33 b(am)h(I)g(Doing?)p
0 TeXcolorgray 0 TeXcolorgray 0 0 1 TeXcolorrgb -319
28 a Fe(T)-9 b(ext)25 b(her)n(e.)p 0 TeXcolorgray 0 TeXcolorgray
-319 570 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0. true 12.8 neg 26.52211 neg 304.19392 32.52211
.5 Frame  gsave 3.0 -45 PtoC Shadow 0.25  setgray gsave fill grestore
stroke grestore gsave 1  setgray gsave fill grestore stroke grestore
gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 0 TeXcolorgray
0 TeXcolorgray 0 0 1 TeXcolorrgb -79 x Fc(An)33 b(Under)n(standab)o(le)
j(Example)p 0 TeXcolorgray 0 TeXcolorgray -319 682 a
Fe(T)-9 b(ext)25 b(her)n(e.)p 0 TeXcolorgray 2384 980
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0. true 12.8 neg 18.08994 neg 304.19392 24.08995
.5 Frame  gsave 3.0 -45 PtoC Shadow 0.25  setgray gsave fill grestore
stroke grestore gsave 1  setgray gsave fill grestore stroke grestore
gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 0 TeXcolorgray
0 TeXcolorgray 13 x Fd(3)p 1 0 0 TeXcolorrgb 103 w(Second)38
b(Column)p 2567 1019 1093 6 v 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 5087 980 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0. true 12.8 neg 18.08994 neg 304.19392 24.08995
.5 Frame  gsave 3.0 -45 PtoC Shadow 0.25  setgray gsave fill grestore
stroke grestore gsave 1  setgray gsave fill grestore stroke grestore
gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
0 TeXcolorgray 0 TeXcolorgray 13 x(3)p 1 0 0 TeXcolorrgb
103 w(Thir)m(d)h(Column)p 5270 1019 930 6 v 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 7790 -667 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0. true 12.8 neg 18.08994 neg 304.19392 24.08995
.5 Frame  gsave 3.0 -45 PtoC Shadow 0.25  setgray gsave fill grestore
stroke grestore gsave 1  setgray gsave fill grestore stroke grestore
gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 0 TeXcolorgray 0 TeXcolorgray
12 x(5)p 1 0 0 TeXcolorrgb 103 w(Conc)m(lusion)p 7973
-629 819 6 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
7790 -82 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0. true 12.8 neg 26.7021 neg 304.19392 32.70212
.5 Frame  gsave 3.0 -45 PtoC Shadow 0.25  setgray gsave fill grestore
stroke grestore gsave 1  setgray gsave fill grestore stroke grestore
gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 0 TeXcolorgray
0 TeXcolorgray 0 0 1 TeXcolorrgb -76 x Fc(Sketc)o(h)34
b(of)f(Pr)n(oof)p 0 TeXcolorgray 0 TeXcolorgray 7790
32 a Fe(T)-9 b(ext)25 b(her)n(e.)p 0 TeXcolorgray 7790
575 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0. true 12.8 neg 26.7021 neg 304.19392 32.70212
.5 Frame  gsave 3.0 -45 PtoC Shadow 0.25  setgray gsave fill grestore
stroke grestore gsave 1  setgray gsave fill grestore stroke grestore
gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 0 TeXcolorgray
0 TeXcolorgray 0 0 1 TeXcolorrgb -76 x Fc(Signi\002cance)35
b(and)f(Applications)p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 7789 689 a Fb(\017)p 0 TeXcolorgray 48
w Fe(Some)26 b(stuf)n(f.)p 0 TeXcolorgray 7790 1304 a
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0. true 12.8 neg 35.36809 neg 304.19392 41.36809
.5 Frame  gsave 3.0 -45 PtoC Shadow 0.25  setgray gsave fill grestore
stroke grestore gsave 1  setgray gsave fill grestore stroke grestore
gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 0 TeXcolorgray
0 TeXcolorgray 0 0 1 TeXcolorrgb -151 x Fc(Ac)n(kno)n(wledg)q(ements)p
0 TeXcolorgray 0 TeXcolorgray 7790 1343 a Fe(I)e(would)i(like)e(to)i
(thank)g(.)15 b(.)g(.)p 0 TeXcolorgray 7789 1464 a Fb(\017)p
0 TeXcolorgray 48 w Fe(Some)26 b(people.)p 0 TeXcolorgray
7790 2059 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0. true 12.8 neg 29.79413 neg 304.19392 35.79414
.5 Frame  gsave 3.0 -45 PtoC Shadow 0.25  setgray gsave fill grestore
stroke grestore gsave 1  setgray gsave fill grestore stroke grestore
gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 0
TeXcolorgray 0 TeXcolorgray 1 0 0 TeXcolorrgb -86 x Fd(Ref)o(erences)p
7790 1997 772 6 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
7835 2184 a Fa([1])p 0 TeXcolorgray 50 w(W)-8 b(orks)21
b(cited.)p 0 TeXcolorgray 0 TeXcolorgray -583 813 a
 currentpoint currentpoint translate 1 0.75383 div 1 0.75383 div scale
neg exch neg exch translate
 -583
813 a 0 TeXcolorgray 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
